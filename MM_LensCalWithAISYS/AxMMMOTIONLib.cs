//------------------------------------------------------------------------------
// <auto-generated>
//     這段程式碼是由工具產生的。
//     執行階段版本:4.0.30319.42000
//
//     對這個檔案所做的變更可能會造成錯誤的行為，而且如果重新產生程式碼，
//     變更將會遺失。
// </auto-generated>
//------------------------------------------------------------------------------

//[assembly: System.Reflection.AssemblyVersion("1.0.0.0")]
//[assembly: System.Windows.Forms.AxHost.TypeLibraryTimeStamp("11/09/2016 11:31:38")]

namespace AxMMMOTIONLib {
    
    
    [System.Windows.Forms.AxHost.ClsidAttribute("{4b6ad28d-96b4-4e61-9fac-9d9a031fd941}")]
    [System.ComponentModel.DesignTimeVisibleAttribute(true)]
    [System.ComponentModel.DefaultEvent("MotionEnd")]
    public class AxMMMotion : System.Windows.Forms.AxHost {
        
        private MMMOTIONLib._DMMMotion ocx;
        
        private AxMMMotionEventMulticaster eventMulticaster;
        
        private System.Windows.Forms.AxHost.ConnectionPointCookie cookie;
        
        public AxMMMotion() : 
                base("4b6ad28d-96b4-4e61-9fac-9d9a031fd941") {
            this.SetAboutBoxDelegate(new AboutBoxDelegate(AboutBox));
        }
        
        public event _DMMMotionEvents_MotionEndEventHandler MotionEnd;
        
        public event _DMMMotionEvents_MultiCard_MotionEndEventHandler MultiCard_MotionEnd;
        
        public virtual int MultiCard_SetAxisMotorReverse(int lHeadID, int lAxis, int lReverse) {
            if ((this.ocx == null)) {
                throw new System.Windows.Forms.AxHost.InvalidActiveXStateException("MultiCard_SetAxisMotorReverse", System.Windows.Forms.AxHost.ActiveXInvokeKind.MethodInvoke);
            }
            int returnValue = ((int)(this.ocx.MultiCard_SetAxisMotorReverse(lHeadID, lAxis, lReverse)));
            return returnValue;
        }
        
        public virtual int MultiCard_SetAxisJogReverse(int lHeadID, int lAxis, int lReverse) {
            if ((this.ocx == null)) {
                throw new System.Windows.Forms.AxHost.InvalidActiveXStateException("MultiCard_SetAxisJogReverse", System.Windows.Forms.AxHost.ActiveXInvokeKind.MethodInvoke);
            }
            int returnValue = ((int)(this.ocx.MultiCard_SetAxisJogReverse(lHeadID, lAxis, lReverse)));
            return returnValue;
        }
        
        public virtual int MultiCard_SetAxisEncoderReverse(int lHeadID, int lAxis, int lReverse) {
            if ((this.ocx == null)) {
                throw new System.Windows.Forms.AxHost.InvalidActiveXStateException("MultiCard_SetAxisEncoderReverse", System.Windows.Forms.AxHost.ActiveXInvokeKind.MethodInvoke);
            }
            int returnValue = ((int)(this.ocx.MultiCard_SetAxisEncoderReverse(lHeadID, lAxis, lReverse)));
            return returnValue;
        }
        
        public virtual int MultiCard_SetAxisLimitTriggerLevel(int lHeadID, int lAxis, int lHigh) {
            if ((this.ocx == null)) {
                throw new System.Windows.Forms.AxHost.InvalidActiveXStateException("MultiCard_SetAxisLimitTriggerLevel", System.Windows.Forms.AxHost.ActiveXInvokeKind.MethodInvoke);
            }
            int returnValue = ((int)(this.ocx.MultiCard_SetAxisLimitTriggerLevel(lHeadID, lAxis, lHigh)));
            return returnValue;
        }
        
        public virtual int MultiCard_SetAxisHomeTriggerLevel(int lHeadID, int lAxis, int lHigh) {
            if ((this.ocx == null)) {
                throw new System.Windows.Forms.AxHost.InvalidActiveXStateException("MultiCard_SetAxisHomeTriggerLevel", System.Windows.Forms.AxHost.ActiveXInvokeKind.MethodInvoke);
            }
            int returnValue = ((int)(this.ocx.MultiCard_SetAxisHomeTriggerLevel(lHeadID, lAxis, lHigh)));
            return returnValue;
        }
        
        public virtual int MultiCard_SetAxisAccDecTime(int lHeadID, int lAxis, double dSec) {
            if ((this.ocx == null)) {
                throw new System.Windows.Forms.AxHost.InvalidActiveXStateException("MultiCard_SetAxisAccDecTime", System.Windows.Forms.AxHost.ActiveXInvokeKind.MethodInvoke);
            }
            int returnValue = ((int)(this.ocx.MultiCard_SetAxisAccDecTime(lHeadID, lAxis, dSec)));
            return returnValue;
        }
        
        public virtual int MultiCard_SetAxisInitSpeed(int lHeadID, int lAxis, double dSpeed) {
            if ((this.ocx == null)) {
                throw new System.Windows.Forms.AxHost.InvalidActiveXStateException("MultiCard_SetAxisInitSpeed", System.Windows.Forms.AxHost.ActiveXInvokeKind.MethodInvoke);
            }
            int returnValue = ((int)(this.ocx.MultiCard_SetAxisInitSpeed(lHeadID, lAxis, dSpeed)));
            return returnValue;
        }
        
        public virtual int MultiCard_SetAxisInposTimeout(int lHeadID, int lAxis, double dSec) {
            if ((this.ocx == null)) {
                throw new System.Windows.Forms.AxHost.InvalidActiveXStateException("MultiCard_SetAxisInposTimeout", System.Windows.Forms.AxHost.ActiveXInvokeKind.MethodInvoke);
            }
            int returnValue = ((int)(this.ocx.MultiCard_SetAxisInposTimeout(lHeadID, lAxis, dSec)));
            return returnValue;
        }
        
        public virtual int MultiCard_SetAxisInposDelay(int lHeadID, int lAxis, double dSec) {
            if ((this.ocx == null)) {
                throw new System.Windows.Forms.AxHost.InvalidActiveXStateException("MultiCard_SetAxisInposDelay", System.Windows.Forms.AxHost.ActiveXInvokeKind.MethodInvoke);
            }
            int returnValue = ((int)(this.ocx.MultiCard_SetAxisInposDelay(lHeadID, lAxis, dSec)));
            return returnValue;
        }
        
        public virtual int MultiCard_SetAxisHomeSpeed(int lHeadID, int lAxis, double dSpeed) {
            if ((this.ocx == null)) {
                throw new System.Windows.Forms.AxHost.InvalidActiveXStateException("MultiCard_SetAxisHomeSpeed", System.Windows.Forms.AxHost.ActiveXInvokeKind.MethodInvoke);
            }
            int returnValue = ((int)(this.ocx.MultiCard_SetAxisHomeSpeed(lHeadID, lAxis, dSpeed)));
            return returnValue;
        }
        
        public virtual int MultiCard_SetAxisHomeBackSpeed(int lHeadID, int lAxis, double dSpeed) {
            if ((this.ocx == null)) {
                throw new System.Windows.Forms.AxHost.InvalidActiveXStateException("MultiCard_SetAxisHomeBackSpeed", System.Windows.Forms.AxHost.ActiveXInvokeKind.MethodInvoke);
            }
            int returnValue = ((int)(this.ocx.MultiCard_SetAxisHomeBackSpeed(lHeadID, lAxis, dSpeed)));
            return returnValue;
        }
        
        public virtual int MultiCard_SetAxisHomeReverse(int lHeadID, int lAxis, int lReverse) {
            if ((this.ocx == null)) {
                throw new System.Windows.Forms.AxHost.InvalidActiveXStateException("MultiCard_SetAxisHomeReverse", System.Windows.Forms.AxHost.ActiveXInvokeKind.MethodInvoke);
            }
            int returnValue = ((int)(this.ocx.MultiCard_SetAxisHomeReverse(lHeadID, lAxis, lReverse)));
            return returnValue;
        }
        
        public virtual int MultiCard_SetAxisField(int lHeadID, int lAxis, double dField) {
            if ((this.ocx == null)) {
                throw new System.Windows.Forms.AxHost.InvalidActiveXStateException("MultiCard_SetAxisField", System.Windows.Forms.AxHost.ActiveXInvokeKind.MethodInvoke);
            }
            int returnValue = ((int)(this.ocx.MultiCard_SetAxisField(lHeadID, lAxis, dField)));
            return returnValue;
        }
        
        public virtual int MultiCard_SetRotaryDirection(int lHeadID, int lDir) {
            if ((this.ocx == null)) {
                throw new System.Windows.Forms.AxHost.InvalidActiveXStateException("MultiCard_SetRotaryDirection", System.Windows.Forms.AxHost.ActiveXInvokeKind.MethodInvoke);
            }
            int returnValue = ((int)(this.ocx.MultiCard_SetRotaryDirection(lHeadID, lDir)));
            return returnValue;
        }
        
        public virtual int MultiCard_SetRotaryMarkEndMethod(int lHeadID, int lStyle) {
            if ((this.ocx == null)) {
                throw new System.Windows.Forms.AxHost.InvalidActiveXStateException("MultiCard_SetRotaryMarkEndMethod", System.Windows.Forms.AxHost.ActiveXInvokeKind.MethodInvoke);
            }
            int returnValue = ((int)(this.ocx.MultiCard_SetRotaryMarkEndMethod(lHeadID, lStyle)));
            return returnValue;
        }
        
        public virtual int MultiCard_SetAxisHomeMode(int lHeadID, int lAxis, int lMode) {
            if ((this.ocx == null)) {
                throw new System.Windows.Forms.AxHost.InvalidActiveXStateException("MultiCard_SetAxisHomeMode", System.Windows.Forms.AxHost.ActiveXInvokeKind.MethodInvoke);
            }
            int returnValue = ((int)(this.ocx.MultiCard_SetAxisHomeMode(lHeadID, lAxis, lMode)));
            return returnValue;
        }
        
        public virtual double MultiCard_GetAxisP1(int lHeadID, int lAxis) {
            if ((this.ocx == null)) {
                throw new System.Windows.Forms.AxHost.InvalidActiveXStateException("MultiCard_GetAxisP1", System.Windows.Forms.AxHost.ActiveXInvokeKind.MethodInvoke);
            }
            double returnValue = ((double)(this.ocx.MultiCard_GetAxisP1(lHeadID, lAxis)));
            return returnValue;
        }
        
        public virtual double MultiCard_GetAxisProgramOrg(int lHeadID, int lAxis) {
            if ((this.ocx == null)) {
                throw new System.Windows.Forms.AxHost.InvalidActiveXStateException("MultiCard_GetAxisProgramOrg", System.Windows.Forms.AxHost.ActiveXInvokeKind.MethodInvoke);
            }
            double returnValue = ((double)(this.ocx.MultiCard_GetAxisProgramOrg(lHeadID, lAxis)));
            return returnValue;
        }
        
        public virtual double MultiCard_GetAxisUnit(int lHeadID, int lAxis) {
            if ((this.ocx == null)) {
                throw new System.Windows.Forms.AxHost.InvalidActiveXStateException("MultiCard_GetAxisUnit", System.Windows.Forms.AxHost.ActiveXInvokeKind.MethodInvoke);
            }
            double returnValue = ((double)(this.ocx.MultiCard_GetAxisUnit(lHeadID, lAxis)));
            return returnValue;
        }
        
        public virtual double MultiCard_GetAxisEncoderUnit(int lHeadID, int lAxis) {
            if ((this.ocx == null)) {
                throw new System.Windows.Forms.AxHost.InvalidActiveXStateException("MultiCard_GetAxisEncoderUnit", System.Windows.Forms.AxHost.ActiveXInvokeKind.MethodInvoke);
            }
            double returnValue = ((double)(this.ocx.MultiCard_GetAxisEncoderUnit(lHeadID, lAxis)));
            return returnValue;
        }
        
        public virtual double MultiCard_GetAxisSpeed(int lHeadID, int lAxis) {
            if ((this.ocx == null)) {
                throw new System.Windows.Forms.AxHost.InvalidActiveXStateException("MultiCard_GetAxisSpeed", System.Windows.Forms.AxHost.ActiveXInvokeKind.MethodInvoke);
            }
            double returnValue = ((double)(this.ocx.MultiCard_GetAxisSpeed(lHeadID, lAxis)));
            return returnValue;
        }
        
        public virtual double MultiCard_GetAxisBacklash(int lHeadID, int lAxis) {
            if ((this.ocx == null)) {
                throw new System.Windows.Forms.AxHost.InvalidActiveXStateException("MultiCard_GetAxisBacklash", System.Windows.Forms.AxHost.ActiveXInvokeKind.MethodInvoke);
            }
            double returnValue = ((double)(this.ocx.MultiCard_GetAxisBacklash(lHeadID, lAxis)));
            return returnValue;
        }
        
        public virtual int MultiCard_GetAxisMotorReverse(int lHeadID, int lAxis) {
            if ((this.ocx == null)) {
                throw new System.Windows.Forms.AxHost.InvalidActiveXStateException("MultiCard_GetAxisMotorReverse", System.Windows.Forms.AxHost.ActiveXInvokeKind.MethodInvoke);
            }
            int returnValue = ((int)(this.ocx.MultiCard_GetAxisMotorReverse(lHeadID, lAxis)));
            return returnValue;
        }
        
        public virtual int MultiCard_GetAxisJogReverse(int lHeadID, int lAxis) {
            if ((this.ocx == null)) {
                throw new System.Windows.Forms.AxHost.InvalidActiveXStateException("MultiCard_GetAxisJogReverse", System.Windows.Forms.AxHost.ActiveXInvokeKind.MethodInvoke);
            }
            int returnValue = ((int)(this.ocx.MultiCard_GetAxisJogReverse(lHeadID, lAxis)));
            return returnValue;
        }
        
        public virtual int MultiCard_GetAxisEncoderReverse(int lHeadID, int lAxis) {
            if ((this.ocx == null)) {
                throw new System.Windows.Forms.AxHost.InvalidActiveXStateException("MultiCard_GetAxisEncoderReverse", System.Windows.Forms.AxHost.ActiveXInvokeKind.MethodInvoke);
            }
            int returnValue = ((int)(this.ocx.MultiCard_GetAxisEncoderReverse(lHeadID, lAxis)));
            return returnValue;
        }
        
        public virtual int MultiCard_GetAxisLimitTriggerLevel(int lHeadID, int lAxis) {
            if ((this.ocx == null)) {
                throw new System.Windows.Forms.AxHost.InvalidActiveXStateException("MultiCard_GetAxisLimitTriggerLevel", System.Windows.Forms.AxHost.ActiveXInvokeKind.MethodInvoke);
            }
            int returnValue = ((int)(this.ocx.MultiCard_GetAxisLimitTriggerLevel(lHeadID, lAxis)));
            return returnValue;
        }
        
        public virtual int MultiCard_GetAxisHomeTriggerLevel(int lHeadID, int lAxis) {
            if ((this.ocx == null)) {
                throw new System.Windows.Forms.AxHost.InvalidActiveXStateException("MultiCard_GetAxisHomeTriggerLevel", System.Windows.Forms.AxHost.ActiveXInvokeKind.MethodInvoke);
            }
            int returnValue = ((int)(this.ocx.MultiCard_GetAxisHomeTriggerLevel(lHeadID, lAxis)));
            return returnValue;
        }
        
        public virtual int MultiCard_GetAxisInposTriggerLevel(int lHeadID, int lAxis) {
            if ((this.ocx == null)) {
                throw new System.Windows.Forms.AxHost.InvalidActiveXStateException("MultiCard_GetAxisInposTriggerLevel", System.Windows.Forms.AxHost.ActiveXInvokeKind.MethodInvoke);
            }
            int returnValue = ((int)(this.ocx.MultiCard_GetAxisInposTriggerLevel(lHeadID, lAxis)));
            return returnValue;
        }
        
        public virtual double MultiCard_GetAxisAccDecTime(int lHeadID, int lAxis) {
            if ((this.ocx == null)) {
                throw new System.Windows.Forms.AxHost.InvalidActiveXStateException("MultiCard_GetAxisAccDecTime", System.Windows.Forms.AxHost.ActiveXInvokeKind.MethodInvoke);
            }
            double returnValue = ((double)(this.ocx.MultiCard_GetAxisAccDecTime(lHeadID, lAxis)));
            return returnValue;
        }
        
        public virtual double MultiCard_GetAxisInitSpeed(int lHeadID, int lAxis) {
            if ((this.ocx == null)) {
                throw new System.Windows.Forms.AxHost.InvalidActiveXStateException("MultiCard_GetAxisInitSpeed", System.Windows.Forms.AxHost.ActiveXInvokeKind.MethodInvoke);
            }
            double returnValue = ((double)(this.ocx.MultiCard_GetAxisInitSpeed(lHeadID, lAxis)));
            return returnValue;
        }
        
        public virtual double MultiCard_GetAxisInposTimeout(int lHeadID, int lAxis) {
            if ((this.ocx == null)) {
                throw new System.Windows.Forms.AxHost.InvalidActiveXStateException("MultiCard_GetAxisInposTimeout", System.Windows.Forms.AxHost.ActiveXInvokeKind.MethodInvoke);
            }
            double returnValue = ((double)(this.ocx.MultiCard_GetAxisInposTimeout(lHeadID, lAxis)));
            return returnValue;
        }
        
        public virtual double MultiCard_GetAxisInposDelay(int lHeadID, int lAxis) {
            if ((this.ocx == null)) {
                throw new System.Windows.Forms.AxHost.InvalidActiveXStateException("MultiCard_GetAxisInposDelay", System.Windows.Forms.AxHost.ActiveXInvokeKind.MethodInvoke);
            }
            double returnValue = ((double)(this.ocx.MultiCard_GetAxisInposDelay(lHeadID, lAxis)));
            return returnValue;
        }
        
        public virtual double MultiCard_GetAxisHomeSpeed(int lHeadID, int lAxis) {
            if ((this.ocx == null)) {
                throw new System.Windows.Forms.AxHost.InvalidActiveXStateException("MultiCard_GetAxisHomeSpeed", System.Windows.Forms.AxHost.ActiveXInvokeKind.MethodInvoke);
            }
            double returnValue = ((double)(this.ocx.MultiCard_GetAxisHomeSpeed(lHeadID, lAxis)));
            return returnValue;
        }
        
        public virtual double MultiCard_GetAxisHomeBackSpeed(int lHeadID, int lAxis) {
            if ((this.ocx == null)) {
                throw new System.Windows.Forms.AxHost.InvalidActiveXStateException("MultiCard_GetAxisHomeBackSpeed", System.Windows.Forms.AxHost.ActiveXInvokeKind.MethodInvoke);
            }
            double returnValue = ((double)(this.ocx.MultiCard_GetAxisHomeBackSpeed(lHeadID, lAxis)));
            return returnValue;
        }
        
        public virtual int MultiCard_GetAxisHomeReverse(int lHeadID, int lAxis) {
            if ((this.ocx == null)) {
                throw new System.Windows.Forms.AxHost.InvalidActiveXStateException("MultiCard_GetAxisHomeReverse", System.Windows.Forms.AxHost.ActiveXInvokeKind.MethodInvoke);
            }
            int returnValue = ((int)(this.ocx.MultiCard_GetAxisHomeReverse(lHeadID, lAxis)));
            return returnValue;
        }
        
        public virtual double MultiCard_GetAxisField(int lHeadID, int lAxis) {
            if ((this.ocx == null)) {
                throw new System.Windows.Forms.AxHost.InvalidActiveXStateException("MultiCard_GetAxisField", System.Windows.Forms.AxHost.ActiveXInvokeKind.MethodInvoke);
            }
            double returnValue = ((double)(this.ocx.MultiCard_GetAxisField(lHeadID, lAxis)));
            return returnValue;
        }
        
        public virtual int MultiCard_GetRotaryDirection(int lHeadID) {
            if ((this.ocx == null)) {
                throw new System.Windows.Forms.AxHost.InvalidActiveXStateException("MultiCard_GetRotaryDirection", System.Windows.Forms.AxHost.ActiveXInvokeKind.MethodInvoke);
            }
            int returnValue = ((int)(this.ocx.MultiCard_GetRotaryDirection(lHeadID)));
            return returnValue;
        }
        
        public virtual int MultiCard_GetRotaryMarkEndMethod(int lHeadID) {
            if ((this.ocx == null)) {
                throw new System.Windows.Forms.AxHost.InvalidActiveXStateException("MultiCard_GetRotaryMarkEndMethod", System.Windows.Forms.AxHost.ActiveXInvokeKind.MethodInvoke);
            }
            int returnValue = ((int)(this.ocx.MultiCard_GetRotaryMarkEndMethod(lHeadID)));
            return returnValue;
        }
        
        public virtual int MultiCard_GetAxisHomeMode(int lHeadID, int lAxis) {
            if ((this.ocx == null)) {
                throw new System.Windows.Forms.AxHost.InvalidActiveXStateException("MultiCard_GetAxisHomeMode", System.Windows.Forms.AxHost.ActiveXInvokeKind.MethodInvoke);
            }
            int returnValue = ((int)(this.ocx.MultiCard_GetAxisHomeMode(lHeadID, lAxis)));
            return returnValue;
        }
        
        public virtual int MultiCard_XYTableSetup(int lHeadID) {
            if ((this.ocx == null)) {
                throw new System.Windows.Forms.AxHost.InvalidActiveXStateException("MultiCard_XYTableSetup", System.Windows.Forms.AxHost.ActiveXInvokeKind.MethodInvoke);
            }
            int returnValue = ((int)(this.ocx.MultiCard_XYTableSetup(lHeadID)));
            return returnValue;
        }
        
        public virtual int MultiCard_RotarySetup(int lHeadID) {
            if ((this.ocx == null)) {
                throw new System.Windows.Forms.AxHost.InvalidActiveXStateException("MultiCard_RotarySetup", System.Windows.Forms.AxHost.ActiveXInvokeKind.MethodInvoke);
            }
            int returnValue = ((int)(this.ocx.MultiCard_RotarySetup(lHeadID)));
            return returnValue;
        }
        
        public virtual int MultiCard_ZAxisSetup(int lHeadID) {
            if ((this.ocx == null)) {
                throw new System.Windows.Forms.AxHost.InvalidActiveXStateException("MultiCard_ZAxisSetup", System.Windows.Forms.AxHost.ActiveXInvokeKind.MethodInvoke);
            }
            int returnValue = ((int)(this.ocx.MultiCard_ZAxisSetup(lHeadID)));
            return returnValue;
        }
        
        public virtual int MultiCard_MoveTo(int lHeadID, double dX, double dY, double dZ, double dR, int lRelative) {
            if ((this.ocx == null)) {
                throw new System.Windows.Forms.AxHost.InvalidActiveXStateException("MultiCard_MoveTo", System.Windows.Forms.AxHost.ActiveXInvokeKind.MethodInvoke);
            }
            int returnValue = ((int)(this.ocx.MultiCard_MoveTo(lHeadID, dX, dY, dZ, dR, lRelative)));
            return returnValue;
        }
        
        public virtual int MultiCard_SetAxisInposTriggerLevel(int lHeadID, int lAxis, int lHigh) {
            if ((this.ocx == null)) {
                throw new System.Windows.Forms.AxHost.InvalidActiveXStateException("MultiCard_SetAxisInposTriggerLevel", System.Windows.Forms.AxHost.ActiveXInvokeKind.MethodInvoke);
            }
            int returnValue = ((int)(this.ocx.MultiCard_SetAxisInposTriggerLevel(lHeadID, lAxis, lHigh)));
            return returnValue;
        }
        
        public virtual int Initial() {
            if ((this.ocx == null)) {
                throw new System.Windows.Forms.AxHost.InvalidActiveXStateException("Initial", System.Windows.Forms.AxHost.ActiveXInvokeKind.MethodInvoke);
            }
            int returnValue = ((int)(this.ocx.Initial()));
            return returnValue;
        }
        
        public virtual int Finish() {
            if ((this.ocx == null)) {
                throw new System.Windows.Forms.AxHost.InvalidActiveXStateException("Finish", System.Windows.Forms.AxHost.ActiveXInvokeKind.MethodInvoke);
            }
            int returnValue = ((int)(this.ocx.Finish()));
            return returnValue;
        }
        
        public virtual int XYTableConfig() {
            if ((this.ocx == null)) {
                throw new System.Windows.Forms.AxHost.InvalidActiveXStateException("XYTableConfig", System.Windows.Forms.AxHost.ActiveXInvokeKind.MethodInvoke);
            }
            int returnValue = ((int)(this.ocx.XYTableConfig()));
            return returnValue;
        }
        
        public virtual int RotaryConfig() {
            if ((this.ocx == null)) {
                throw new System.Windows.Forms.AxHost.InvalidActiveXStateException("RotaryConfig", System.Windows.Forms.AxHost.ActiveXInvokeKind.MethodInvoke);
            }
            int returnValue = ((int)(this.ocx.RotaryConfig()));
            return returnValue;
        }
        
        public virtual int ZAxisConfig() {
            if ((this.ocx == null)) {
                throw new System.Windows.Forms.AxHost.InvalidActiveXStateException("ZAxisConfig", System.Windows.Forms.AxHost.ActiveXInvokeKind.MethodInvoke);
            }
            int returnValue = ((int)(this.ocx.ZAxisConfig()));
            return returnValue;
        }
        
        public virtual int Home(int lAxis, int lOpt) {
            if ((this.ocx == null)) {
                throw new System.Windows.Forms.AxHost.InvalidActiveXStateException("Home", System.Windows.Forms.AxHost.ActiveXInvokeKind.MethodInvoke);
            }
            int returnValue = ((int)(this.ocx.Home(lAxis, lOpt)));
            return returnValue;
        }
        
        public virtual int MoveTo(double dX, double dY, double dZ, double dR, int lOpt) {
            if ((this.ocx == null)) {
                throw new System.Windows.Forms.AxHost.InvalidActiveXStateException("MoveTo", System.Windows.Forms.AxHost.ActiveXInvokeKind.MethodInvoke);
            }
            int returnValue = ((int)(this.ocx.MoveTo(dX, dY, dZ, dR, lOpt)));
            return returnValue;
        }
        
        public virtual int IsMotion(int lOpt) {
            if ((this.ocx == null)) {
                throw new System.Windows.Forms.AxHost.InvalidActiveXStateException("IsMotion", System.Windows.Forms.AxHost.ActiveXInvokeKind.MethodInvoke);
            }
            int returnValue = ((int)(this.ocx.IsMotion(lOpt)));
            return returnValue;
        }
        
        public virtual int GetCurPosition(ref double pdX, ref double pdY, ref double pdZ, ref double pdR, int lOpt) {
            if ((this.ocx == null)) {
                throw new System.Windows.Forms.AxHost.InvalidActiveXStateException("GetCurPosition", System.Windows.Forms.AxHost.ActiveXInvokeKind.MethodInvoke);
            }
            int returnValue = ((int)(this.ocx.GetCurPosition(ref pdX, ref pdY, ref pdZ, ref pdR, lOpt)));
            return returnValue;
        }
        
        public virtual void AboutBox() {
            if ((this.ocx == null)) {
                throw new System.Windows.Forms.AxHost.InvalidActiveXStateException("AboutBox", System.Windows.Forms.AxHost.ActiveXInvokeKind.MethodInvoke);
            }
            this.ocx.AboutBox();
        }
        
        public virtual int EmgStop() {
            if ((this.ocx == null)) {
                throw new System.Windows.Forms.AxHost.InvalidActiveXStateException("EmgStop", System.Windows.Forms.AxHost.ActiveXInvokeKind.MethodInvoke);
            }
            int returnValue = ((int)(this.ocx.EmgStop()));
            return returnValue;
        }
        
        public virtual int JogBegin(int lAxis, int lDir, int lOpt) {
            if ((this.ocx == null)) {
                throw new System.Windows.Forms.AxHost.InvalidActiveXStateException("JogBegin", System.Windows.Forms.AxHost.ActiveXInvokeKind.MethodInvoke);
            }
            int returnValue = ((int)(this.ocx.JogBegin(lAxis, lDir, lOpt)));
            return returnValue;
        }
        
        public virtual int JogEnd(int lOpt) {
            if ((this.ocx == null)) {
                throw new System.Windows.Forms.AxHost.InvalidActiveXStateException("JogEnd", System.Windows.Forms.AxHost.ActiveXInvokeKind.MethodInvoke);
            }
            int returnValue = ((int)(this.ocx.JogEnd(lOpt)));
            return returnValue;
        }
        
        public virtual int SetAxisP1(int lAxis, double dPos) {
            if ((this.ocx == null)) {
                throw new System.Windows.Forms.AxHost.InvalidActiveXStateException("SetAxisP1", System.Windows.Forms.AxHost.ActiveXInvokeKind.MethodInvoke);
            }
            int returnValue = ((int)(this.ocx.SetAxisP1(lAxis, dPos)));
            return returnValue;
        }
        
        public virtual int SetAxisProgramOrg(int lAxis, double dPos) {
            if ((this.ocx == null)) {
                throw new System.Windows.Forms.AxHost.InvalidActiveXStateException("SetAxisProgramOrg", System.Windows.Forms.AxHost.ActiveXInvokeKind.MethodInvoke);
            }
            int returnValue = ((int)(this.ocx.SetAxisProgramOrg(lAxis, dPos)));
            return returnValue;
        }
        
        public virtual int SetAxisUnit(int lAxis, double dUnit) {
            if ((this.ocx == null)) {
                throw new System.Windows.Forms.AxHost.InvalidActiveXStateException("SetAxisUnit", System.Windows.Forms.AxHost.ActiveXInvokeKind.MethodInvoke);
            }
            int returnValue = ((int)(this.ocx.SetAxisUnit(lAxis, dUnit)));
            return returnValue;
        }
        
        public virtual int SetAxisEncoderUnit(int lAxis, double dUnit) {
            if ((this.ocx == null)) {
                throw new System.Windows.Forms.AxHost.InvalidActiveXStateException("SetAxisEncoderUnit", System.Windows.Forms.AxHost.ActiveXInvokeKind.MethodInvoke);
            }
            int returnValue = ((int)(this.ocx.SetAxisEncoderUnit(lAxis, dUnit)));
            return returnValue;
        }
        
        public virtual int SetAxisSpeed(int lAxis, double dSpeed) {
            if ((this.ocx == null)) {
                throw new System.Windows.Forms.AxHost.InvalidActiveXStateException("SetAxisSpeed", System.Windows.Forms.AxHost.ActiveXInvokeKind.MethodInvoke);
            }
            int returnValue = ((int)(this.ocx.SetAxisSpeed(lAxis, dSpeed)));
            return returnValue;
        }
        
        public virtual int SetAxisBacklash(int lAxis, double dValue) {
            if ((this.ocx == null)) {
                throw new System.Windows.Forms.AxHost.InvalidActiveXStateException("SetAxisBacklash", System.Windows.Forms.AxHost.ActiveXInvokeKind.MethodInvoke);
            }
            int returnValue = ((int)(this.ocx.SetAxisBacklash(lAxis, dValue)));
            return returnValue;
        }
        
        public virtual int SetAxisMotorReverse(int lAxis, int lReverse) {
            if ((this.ocx == null)) {
                throw new System.Windows.Forms.AxHost.InvalidActiveXStateException("SetAxisMotorReverse", System.Windows.Forms.AxHost.ActiveXInvokeKind.MethodInvoke);
            }
            int returnValue = ((int)(this.ocx.SetAxisMotorReverse(lAxis, lReverse)));
            return returnValue;
        }
        
        public virtual int SetAxisJogReverse(int lAxis, int lReverse) {
            if ((this.ocx == null)) {
                throw new System.Windows.Forms.AxHost.InvalidActiveXStateException("SetAxisJogReverse", System.Windows.Forms.AxHost.ActiveXInvokeKind.MethodInvoke);
            }
            int returnValue = ((int)(this.ocx.SetAxisJogReverse(lAxis, lReverse)));
            return returnValue;
        }
        
        public virtual int SetAxisEncoderReverse(int lAxis, int lReverse) {
            if ((this.ocx == null)) {
                throw new System.Windows.Forms.AxHost.InvalidActiveXStateException("SetAxisEncoderReverse", System.Windows.Forms.AxHost.ActiveXInvokeKind.MethodInvoke);
            }
            int returnValue = ((int)(this.ocx.SetAxisEncoderReverse(lAxis, lReverse)));
            return returnValue;
        }
        
        public virtual int SetAxisLimitTriggerLevel(int lAxis, int lHigh) {
            if ((this.ocx == null)) {
                throw new System.Windows.Forms.AxHost.InvalidActiveXStateException("SetAxisLimitTriggerLevel", System.Windows.Forms.AxHost.ActiveXInvokeKind.MethodInvoke);
            }
            int returnValue = ((int)(this.ocx.SetAxisLimitTriggerLevel(lAxis, lHigh)));
            return returnValue;
        }
        
        public virtual int SetAxisHomeTriggerLevel(int lAxis, int lHigh) {
            if ((this.ocx == null)) {
                throw new System.Windows.Forms.AxHost.InvalidActiveXStateException("SetAxisHomeTriggerLevel", System.Windows.Forms.AxHost.ActiveXInvokeKind.MethodInvoke);
            }
            int returnValue = ((int)(this.ocx.SetAxisHomeTriggerLevel(lAxis, lHigh)));
            return returnValue;
        }
        
        public virtual int SetAxisInposTriggerLevel(int lAxis, int lHigh) {
            if ((this.ocx == null)) {
                throw new System.Windows.Forms.AxHost.InvalidActiveXStateException("SetAxisInposTriggerLevel", System.Windows.Forms.AxHost.ActiveXInvokeKind.MethodInvoke);
            }
            int returnValue = ((int)(this.ocx.SetAxisInposTriggerLevel(lAxis, lHigh)));
            return returnValue;
        }
        
        public virtual int SetAxisAccDecTime(int lAxis, double dSec) {
            if ((this.ocx == null)) {
                throw new System.Windows.Forms.AxHost.InvalidActiveXStateException("SetAxisAccDecTime", System.Windows.Forms.AxHost.ActiveXInvokeKind.MethodInvoke);
            }
            int returnValue = ((int)(this.ocx.SetAxisAccDecTime(lAxis, dSec)));
            return returnValue;
        }
        
        public virtual int SetAxisInitSpeed(int lAxis, double dSpeed) {
            if ((this.ocx == null)) {
                throw new System.Windows.Forms.AxHost.InvalidActiveXStateException("SetAxisInitSpeed", System.Windows.Forms.AxHost.ActiveXInvokeKind.MethodInvoke);
            }
            int returnValue = ((int)(this.ocx.SetAxisInitSpeed(lAxis, dSpeed)));
            return returnValue;
        }
        
        public virtual int SetAxisInposTimeout(int lAxis, double dSec) {
            if ((this.ocx == null)) {
                throw new System.Windows.Forms.AxHost.InvalidActiveXStateException("SetAxisInposTimeout", System.Windows.Forms.AxHost.ActiveXInvokeKind.MethodInvoke);
            }
            int returnValue = ((int)(this.ocx.SetAxisInposTimeout(lAxis, dSec)));
            return returnValue;
        }
        
        public virtual int SetAxisInposDelay(int lAxis, double dSec) {
            if ((this.ocx == null)) {
                throw new System.Windows.Forms.AxHost.InvalidActiveXStateException("SetAxisInposDelay", System.Windows.Forms.AxHost.ActiveXInvokeKind.MethodInvoke);
            }
            int returnValue = ((int)(this.ocx.SetAxisInposDelay(lAxis, dSec)));
            return returnValue;
        }
        
        public virtual int SetAxisHomeSpeed(int lAxis, double dSpeed) {
            if ((this.ocx == null)) {
                throw new System.Windows.Forms.AxHost.InvalidActiveXStateException("SetAxisHomeSpeed", System.Windows.Forms.AxHost.ActiveXInvokeKind.MethodInvoke);
            }
            int returnValue = ((int)(this.ocx.SetAxisHomeSpeed(lAxis, dSpeed)));
            return returnValue;
        }
        
        public virtual int SetAxisHomeBackSpeed(int lAxis, double dSpeed) {
            if ((this.ocx == null)) {
                throw new System.Windows.Forms.AxHost.InvalidActiveXStateException("SetAxisHomeBackSpeed", System.Windows.Forms.AxHost.ActiveXInvokeKind.MethodInvoke);
            }
            int returnValue = ((int)(this.ocx.SetAxisHomeBackSpeed(lAxis, dSpeed)));
            return returnValue;
        }
        
        public virtual int SetAxisHomeReverse(int lAxis, int lReverse) {
            if ((this.ocx == null)) {
                throw new System.Windows.Forms.AxHost.InvalidActiveXStateException("SetAxisHomeReverse", System.Windows.Forms.AxHost.ActiveXInvokeKind.MethodInvoke);
            }
            int returnValue = ((int)(this.ocx.SetAxisHomeReverse(lAxis, lReverse)));
            return returnValue;
        }
        
        public virtual int SetAxisField(int lAxis, double dField) {
            if ((this.ocx == null)) {
                throw new System.Windows.Forms.AxHost.InvalidActiveXStateException("SetAxisField", System.Windows.Forms.AxHost.ActiveXInvokeKind.MethodInvoke);
            }
            int returnValue = ((int)(this.ocx.SetAxisField(lAxis, dField)));
            return returnValue;
        }
        
        public virtual int SetRotaryDirection(int lDir) {
            if ((this.ocx == null)) {
                throw new System.Windows.Forms.AxHost.InvalidActiveXStateException("SetRotaryDirection", System.Windows.Forms.AxHost.ActiveXInvokeKind.MethodInvoke);
            }
            int returnValue = ((int)(this.ocx.SetRotaryDirection(lDir)));
            return returnValue;
        }
        
        public virtual int SetRotaryMarkEndMethod(int lStyle) {
            if ((this.ocx == null)) {
                throw new System.Windows.Forms.AxHost.InvalidActiveXStateException("SetRotaryMarkEndMethod", System.Windows.Forms.AxHost.ActiveXInvokeKind.MethodInvoke);
            }
            int returnValue = ((int)(this.ocx.SetRotaryMarkEndMethod(lStyle)));
            return returnValue;
        }
        
        public virtual double GetAxisP1(int lAxis) {
            if ((this.ocx == null)) {
                throw new System.Windows.Forms.AxHost.InvalidActiveXStateException("GetAxisP1", System.Windows.Forms.AxHost.ActiveXInvokeKind.MethodInvoke);
            }
            double returnValue = ((double)(this.ocx.GetAxisP1(lAxis)));
            return returnValue;
        }
        
        public virtual double GetAxisProgramOrg(int lAxis) {
            if ((this.ocx == null)) {
                throw new System.Windows.Forms.AxHost.InvalidActiveXStateException("GetAxisProgramOrg", System.Windows.Forms.AxHost.ActiveXInvokeKind.MethodInvoke);
            }
            double returnValue = ((double)(this.ocx.GetAxisProgramOrg(lAxis)));
            return returnValue;
        }
        
        public virtual double GetAxisUnit(int lAxis) {
            if ((this.ocx == null)) {
                throw new System.Windows.Forms.AxHost.InvalidActiveXStateException("GetAxisUnit", System.Windows.Forms.AxHost.ActiveXInvokeKind.MethodInvoke);
            }
            double returnValue = ((double)(this.ocx.GetAxisUnit(lAxis)));
            return returnValue;
        }
        
        public virtual double GetAxisEncoderUnit(int lAxis) {
            if ((this.ocx == null)) {
                throw new System.Windows.Forms.AxHost.InvalidActiveXStateException("GetAxisEncoderUnit", System.Windows.Forms.AxHost.ActiveXInvokeKind.MethodInvoke);
            }
            double returnValue = ((double)(this.ocx.GetAxisEncoderUnit(lAxis)));
            return returnValue;
        }
        
        public virtual double GetAxisSpeed(int lAxis) {
            if ((this.ocx == null)) {
                throw new System.Windows.Forms.AxHost.InvalidActiveXStateException("GetAxisSpeed", System.Windows.Forms.AxHost.ActiveXInvokeKind.MethodInvoke);
            }
            double returnValue = ((double)(this.ocx.GetAxisSpeed(lAxis)));
            return returnValue;
        }
        
        public virtual double GetAxisBacklash(int lAxis) {
            if ((this.ocx == null)) {
                throw new System.Windows.Forms.AxHost.InvalidActiveXStateException("GetAxisBacklash", System.Windows.Forms.AxHost.ActiveXInvokeKind.MethodInvoke);
            }
            double returnValue = ((double)(this.ocx.GetAxisBacklash(lAxis)));
            return returnValue;
        }
        
        public virtual int GetAxisMotorReverse(int lAxis) {
            if ((this.ocx == null)) {
                throw new System.Windows.Forms.AxHost.InvalidActiveXStateException("GetAxisMotorReverse", System.Windows.Forms.AxHost.ActiveXInvokeKind.MethodInvoke);
            }
            int returnValue = ((int)(this.ocx.GetAxisMotorReverse(lAxis)));
            return returnValue;
        }
        
        public virtual int GetAxisJogReverse(int lAxis) {
            if ((this.ocx == null)) {
                throw new System.Windows.Forms.AxHost.InvalidActiveXStateException("GetAxisJogReverse", System.Windows.Forms.AxHost.ActiveXInvokeKind.MethodInvoke);
            }
            int returnValue = ((int)(this.ocx.GetAxisJogReverse(lAxis)));
            return returnValue;
        }
        
        public virtual int GetAxisEncoderReverse(int lAxis) {
            if ((this.ocx == null)) {
                throw new System.Windows.Forms.AxHost.InvalidActiveXStateException("GetAxisEncoderReverse", System.Windows.Forms.AxHost.ActiveXInvokeKind.MethodInvoke);
            }
            int returnValue = ((int)(this.ocx.GetAxisEncoderReverse(lAxis)));
            return returnValue;
        }
        
        public virtual int GetAxisLimitTriggerLevel(int lAxis) {
            if ((this.ocx == null)) {
                throw new System.Windows.Forms.AxHost.InvalidActiveXStateException("GetAxisLimitTriggerLevel", System.Windows.Forms.AxHost.ActiveXInvokeKind.MethodInvoke);
            }
            int returnValue = ((int)(this.ocx.GetAxisLimitTriggerLevel(lAxis)));
            return returnValue;
        }
        
        public virtual int GetAxisHomeTriggerLevel(int lAxis) {
            if ((this.ocx == null)) {
                throw new System.Windows.Forms.AxHost.InvalidActiveXStateException("GetAxisHomeTriggerLevel", System.Windows.Forms.AxHost.ActiveXInvokeKind.MethodInvoke);
            }
            int returnValue = ((int)(this.ocx.GetAxisHomeTriggerLevel(lAxis)));
            return returnValue;
        }
        
        public virtual int GetAxisInposTriggerLevel(int lAxis) {
            if ((this.ocx == null)) {
                throw new System.Windows.Forms.AxHost.InvalidActiveXStateException("GetAxisInposTriggerLevel", System.Windows.Forms.AxHost.ActiveXInvokeKind.MethodInvoke);
            }
            int returnValue = ((int)(this.ocx.GetAxisInposTriggerLevel(lAxis)));
            return returnValue;
        }
        
        public virtual double GetAxisAccDecTime(int lAxis) {
            if ((this.ocx == null)) {
                throw new System.Windows.Forms.AxHost.InvalidActiveXStateException("GetAxisAccDecTime", System.Windows.Forms.AxHost.ActiveXInvokeKind.MethodInvoke);
            }
            double returnValue = ((double)(this.ocx.GetAxisAccDecTime(lAxis)));
            return returnValue;
        }
        
        public virtual double GetAxisInitSpeed(int lAxis) {
            if ((this.ocx == null)) {
                throw new System.Windows.Forms.AxHost.InvalidActiveXStateException("GetAxisInitSpeed", System.Windows.Forms.AxHost.ActiveXInvokeKind.MethodInvoke);
            }
            double returnValue = ((double)(this.ocx.GetAxisInitSpeed(lAxis)));
            return returnValue;
        }
        
        public virtual double GetAxisInposTimeout(int lAxis) {
            if ((this.ocx == null)) {
                throw new System.Windows.Forms.AxHost.InvalidActiveXStateException("GetAxisInposTimeout", System.Windows.Forms.AxHost.ActiveXInvokeKind.MethodInvoke);
            }
            double returnValue = ((double)(this.ocx.GetAxisInposTimeout(lAxis)));
            return returnValue;
        }
        
        public virtual double GetAxisInposDelay(int lAxis) {
            if ((this.ocx == null)) {
                throw new System.Windows.Forms.AxHost.InvalidActiveXStateException("GetAxisInposDelay", System.Windows.Forms.AxHost.ActiveXInvokeKind.MethodInvoke);
            }
            double returnValue = ((double)(this.ocx.GetAxisInposDelay(lAxis)));
            return returnValue;
        }
        
        public virtual double GetAxisHomeSpeed(int lAxis) {
            if ((this.ocx == null)) {
                throw new System.Windows.Forms.AxHost.InvalidActiveXStateException("GetAxisHomeSpeed", System.Windows.Forms.AxHost.ActiveXInvokeKind.MethodInvoke);
            }
            double returnValue = ((double)(this.ocx.GetAxisHomeSpeed(lAxis)));
            return returnValue;
        }
        
        public virtual double GetAxisHomeBackSpeed(int lAxis) {
            if ((this.ocx == null)) {
                throw new System.Windows.Forms.AxHost.InvalidActiveXStateException("GetAxisHomeBackSpeed", System.Windows.Forms.AxHost.ActiveXInvokeKind.MethodInvoke);
            }
            double returnValue = ((double)(this.ocx.GetAxisHomeBackSpeed(lAxis)));
            return returnValue;
        }
        
        public virtual int GetAxisHomeReverse(int lAxis) {
            if ((this.ocx == null)) {
                throw new System.Windows.Forms.AxHost.InvalidActiveXStateException("GetAxisHomeReverse", System.Windows.Forms.AxHost.ActiveXInvokeKind.MethodInvoke);
            }
            int returnValue = ((int)(this.ocx.GetAxisHomeReverse(lAxis)));
            return returnValue;
        }
        
        public virtual double GetAxisField(int lAxis) {
            if ((this.ocx == null)) {
                throw new System.Windows.Forms.AxHost.InvalidActiveXStateException("GetAxisField", System.Windows.Forms.AxHost.ActiveXInvokeKind.MethodInvoke);
            }
            double returnValue = ((double)(this.ocx.GetAxisField(lAxis)));
            return returnValue;
        }
        
        public virtual int GetRotaryDirection() {
            if ((this.ocx == null)) {
                throw new System.Windows.Forms.AxHost.InvalidActiveXStateException("GetRotaryDirection", System.Windows.Forms.AxHost.ActiveXInvokeKind.MethodInvoke);
            }
            int returnValue = ((int)(this.ocx.GetRotaryDirection()));
            return returnValue;
        }
        
        public virtual int GetRotaryMarkEndMethod() {
            if ((this.ocx == null)) {
                throw new System.Windows.Forms.AxHost.InvalidActiveXStateException("GetRotaryMarkEndMethod", System.Windows.Forms.AxHost.ActiveXInvokeKind.MethodInvoke);
            }
            int returnValue = ((int)(this.ocx.GetRotaryMarkEndMethod()));
            return returnValue;
        }
        
        public virtual int SetAxisHomeMode(int lAxis, int lMode) {
            if ((this.ocx == null)) {
                throw new System.Windows.Forms.AxHost.InvalidActiveXStateException("SetAxisHomeMode", System.Windows.Forms.AxHost.ActiveXInvokeKind.MethodInvoke);
            }
            int returnValue = ((int)(this.ocx.SetAxisHomeMode(lAxis, lMode)));
            return returnValue;
        }
        
        public virtual int GetAxisHomeMode(int lAxis) {
            if ((this.ocx == null)) {
                throw new System.Windows.Forms.AxHost.InvalidActiveXStateException("GetAxisHomeMode", System.Windows.Forms.AxHost.ActiveXInvokeKind.MethodInvoke);
            }
            int returnValue = ((int)(this.ocx.GetAxisHomeMode(lAxis)));
            return returnValue;
        }
        
        public virtual int AxisMoveTo(int lAxis, double dPos, int uOption) {
            if ((this.ocx == null)) {
                throw new System.Windows.Forms.AxHost.InvalidActiveXStateException("AxisMoveTo", System.Windows.Forms.AxHost.ActiveXInvokeKind.MethodInvoke);
            }
            int returnValue = ((int)(this.ocx.AxisMoveTo(lAxis, dPos, uOption)));
            return returnValue;
        }
        
        public virtual int MotionStatus(int uOption) {
            if ((this.ocx == null)) {
                throw new System.Windows.Forms.AxHost.InvalidActiveXStateException("MotionStatus", System.Windows.Forms.AxHost.ActiveXInvokeKind.MethodInvoke);
            }
            int returnValue = ((int)(this.ocx.MotionStatus(uOption)));
            return returnValue;
        }
        
        public virtual int SetCurPosition(double dX, double dY, double dZ, double dRotary, int lOpt) {
            if ((this.ocx == null)) {
                throw new System.Windows.Forms.AxHost.InvalidActiveXStateException("SetCurPosition", System.Windows.Forms.AxHost.ActiveXInvokeKind.MethodInvoke);
            }
            int returnValue = ((int)(this.ocx.SetCurPosition(dX, dY, dZ, dRotary, lOpt)));
            return returnValue;
        }
        
        public virtual int GetXYTableCorPath(ref string pstrPath) {
            if ((this.ocx == null)) {
                throw new System.Windows.Forms.AxHost.InvalidActiveXStateException("GetXYTableCorPath", System.Windows.Forms.AxHost.ActiveXInvokeKind.MethodInvoke);
            }
            int returnValue = ((int)(this.ocx.GetXYTableCorPath(ref pstrPath)));
            return returnValue;
        }
        
        public virtual int ReloadXYCorTable() {
            if ((this.ocx == null)) {
                throw new System.Windows.Forms.AxHost.InvalidActiveXStateException("ReloadXYCorTable", System.Windows.Forms.AxHost.ActiveXInvokeKind.MethodInvoke);
            }
            int returnValue = ((int)(this.ocx.ReloadXYCorTable()));
            return returnValue;
        }
        
        public virtual int XYTableSetup(int lOption) {
            if ((this.ocx == null)) {
                throw new System.Windows.Forms.AxHost.InvalidActiveXStateException("XYTableSetup", System.Windows.Forms.AxHost.ActiveXInvokeKind.MethodInvoke);
            }
            int returnValue = ((int)(this.ocx.XYTableSetup(lOption)));
            return returnValue;
        }
        
        public virtual int RotarySetup(int lOption) {
            if ((this.ocx == null)) {
                throw new System.Windows.Forms.AxHost.InvalidActiveXStateException("RotarySetup", System.Windows.Forms.AxHost.ActiveXInvokeKind.MethodInvoke);
            }
            int returnValue = ((int)(this.ocx.RotarySetup(lOption)));
            return returnValue;
        }
        
        public virtual int ZAxisSetup(int lOption) {
            if ((this.ocx == null)) {
                throw new System.Windows.Forms.AxHost.InvalidActiveXStateException("ZAxisSetup", System.Windows.Forms.AxHost.ActiveXInvokeKind.MethodInvoke);
            }
            int returnValue = ((int)(this.ocx.ZAxisSetup(lOption)));
            return returnValue;
        }
        
        public virtual int SetMotionPos(int lAxis, double dPos) {
            if ((this.ocx == null)) {
                throw new System.Windows.Forms.AxHost.InvalidActiveXStateException("SetMotionPos", System.Windows.Forms.AxHost.ActiveXInvokeKind.MethodInvoke);
            }
            int returnValue = ((int)(this.ocx.SetMotionPos(lAxis, dPos)));
            return returnValue;
        }
        
        public virtual int MultiCard_Home(int lHeadID, int lAxis) {
            if ((this.ocx == null)) {
                throw new System.Windows.Forms.AxHost.InvalidActiveXStateException("MultiCard_Home", System.Windows.Forms.AxHost.ActiveXInvokeKind.MethodInvoke);
            }
            int returnValue = ((int)(this.ocx.MultiCard_Home(lHeadID, lAxis)));
            return returnValue;
        }
        
        public virtual int MultiCard_IsMotion(int lHeadID) {
            if ((this.ocx == null)) {
                throw new System.Windows.Forms.AxHost.InvalidActiveXStateException("MultiCard_IsMotion", System.Windows.Forms.AxHost.ActiveXInvokeKind.MethodInvoke);
            }
            int returnValue = ((int)(this.ocx.MultiCard_IsMotion(lHeadID)));
            return returnValue;
        }
        
        public virtual int MultiCard_GetCurPosition(int lHeadID, ref double pdX, ref double pdY, ref double pdZ, ref double pdR, int lType) {
            if ((this.ocx == null)) {
                throw new System.Windows.Forms.AxHost.InvalidActiveXStateException("MultiCard_GetCurPosition", System.Windows.Forms.AxHost.ActiveXInvokeKind.MethodInvoke);
            }
            int returnValue = ((int)(this.ocx.MultiCard_GetCurPosition(lHeadID, ref pdX, ref pdY, ref pdZ, ref pdR, lType)));
            return returnValue;
        }
        
        public virtual int MultiCard_SetCurPosition(int lHeadID, double dX, double dY, double dZ, double dR, int lType) {
            if ((this.ocx == null)) {
                throw new System.Windows.Forms.AxHost.InvalidActiveXStateException("MultiCard_SetCurPosition", System.Windows.Forms.AxHost.ActiveXInvokeKind.MethodInvoke);
            }
            int returnValue = ((int)(this.ocx.MultiCard_SetCurPosition(lHeadID, dX, dY, dZ, dR, lType)));
            return returnValue;
        }
        
        public virtual int MultiCard_JogBegin(int lHeadID, int lAxis, int lDir) {
            if ((this.ocx == null)) {
                throw new System.Windows.Forms.AxHost.InvalidActiveXStateException("MultiCard_JogBegin", System.Windows.Forms.AxHost.ActiveXInvokeKind.MethodInvoke);
            }
            int returnValue = ((int)(this.ocx.MultiCard_JogBegin(lHeadID, lAxis, lDir)));
            return returnValue;
        }
        
        public virtual int MultiCard_JogEnd(int lHeadID, int lAxis) {
            if ((this.ocx == null)) {
                throw new System.Windows.Forms.AxHost.InvalidActiveXStateException("MultiCard_JogEnd", System.Windows.Forms.AxHost.ActiveXInvokeKind.MethodInvoke);
            }
            int returnValue = ((int)(this.ocx.MultiCard_JogEnd(lHeadID, lAxis)));
            return returnValue;
        }
        
        public virtual int MultiCard_AxisMoveTo(int lHeadID, int lAxis, double dPos, int lRelative) {
            if ((this.ocx == null)) {
                throw new System.Windows.Forms.AxHost.InvalidActiveXStateException("MultiCard_AxisMoveTo", System.Windows.Forms.AxHost.ActiveXInvokeKind.MethodInvoke);
            }
            int returnValue = ((int)(this.ocx.MultiCard_AxisMoveTo(lHeadID, lAxis, dPos, lRelative)));
            return returnValue;
        }
        
        public virtual int MultiCard_MotionStatus(int lHeadID) {
            if ((this.ocx == null)) {
                throw new System.Windows.Forms.AxHost.InvalidActiveXStateException("MultiCard_MotionStatus", System.Windows.Forms.AxHost.ActiveXInvokeKind.MethodInvoke);
            }
            int returnValue = ((int)(this.ocx.MultiCard_MotionStatus(lHeadID)));
            return returnValue;
        }
        
        public virtual int MultiCard_GetXYTableCorPath(int lHeadID, ref string pstrPath) {
            if ((this.ocx == null)) {
                throw new System.Windows.Forms.AxHost.InvalidActiveXStateException("MultiCard_GetXYTableCorPath", System.Windows.Forms.AxHost.ActiveXInvokeKind.MethodInvoke);
            }
            int returnValue = ((int)(this.ocx.MultiCard_GetXYTableCorPath(lHeadID, ref pstrPath)));
            return returnValue;
        }
        
        public virtual int MultiCard_ReloadXYCorTable(int lHeadID) {
            if ((this.ocx == null)) {
                throw new System.Windows.Forms.AxHost.InvalidActiveXStateException("MultiCard_ReloadXYCorTable", System.Windows.Forms.AxHost.ActiveXInvokeKind.MethodInvoke);
            }
            int returnValue = ((int)(this.ocx.MultiCard_ReloadXYCorTable(lHeadID)));
            return returnValue;
        }
        
        public virtual int MultiCard_SetMotionPos(int lHeadID, int lAxis, double dPos) {
            if ((this.ocx == null)) {
                throw new System.Windows.Forms.AxHost.InvalidActiveXStateException("MultiCard_SetMotionPos", System.Windows.Forms.AxHost.ActiveXInvokeKind.MethodInvoke);
            }
            int returnValue = ((int)(this.ocx.MultiCard_SetMotionPos(lHeadID, lAxis, dPos)));
            return returnValue;
        }
        
        public virtual int MultiCard_SetAxisP1(int lHeadID, int lAxis, double dPos) {
            if ((this.ocx == null)) {
                throw new System.Windows.Forms.AxHost.InvalidActiveXStateException("MultiCard_SetAxisP1", System.Windows.Forms.AxHost.ActiveXInvokeKind.MethodInvoke);
            }
            int returnValue = ((int)(this.ocx.MultiCard_SetAxisP1(lHeadID, lAxis, dPos)));
            return returnValue;
        }
        
        public virtual int MultiCard_SetAxisProgramOrg(int lHeadID, int lAxis, double dPos) {
            if ((this.ocx == null)) {
                throw new System.Windows.Forms.AxHost.InvalidActiveXStateException("MultiCard_SetAxisProgramOrg", System.Windows.Forms.AxHost.ActiveXInvokeKind.MethodInvoke);
            }
            int returnValue = ((int)(this.ocx.MultiCard_SetAxisProgramOrg(lHeadID, lAxis, dPos)));
            return returnValue;
        }
        
        public virtual int MultiCard_SetAxisUnit(int lHeadID, int lAxis, double dUnit) {
            if ((this.ocx == null)) {
                throw new System.Windows.Forms.AxHost.InvalidActiveXStateException("MultiCard_SetAxisUnit", System.Windows.Forms.AxHost.ActiveXInvokeKind.MethodInvoke);
            }
            int returnValue = ((int)(this.ocx.MultiCard_SetAxisUnit(lHeadID, lAxis, dUnit)));
            return returnValue;
        }
        
        public virtual int MultiCard_SetAxisEncoderUnit(int lHeadID, int lAxis, double dUnit) {
            if ((this.ocx == null)) {
                throw new System.Windows.Forms.AxHost.InvalidActiveXStateException("MultiCard_SetAxisEncoderUnit", System.Windows.Forms.AxHost.ActiveXInvokeKind.MethodInvoke);
            }
            int returnValue = ((int)(this.ocx.MultiCard_SetAxisEncoderUnit(lHeadID, lAxis, dUnit)));
            return returnValue;
        }
        
        public virtual int MultiCard_SetAxisSpeed(int lHeadID, int lAxis, double dSpeed) {
            if ((this.ocx == null)) {
                throw new System.Windows.Forms.AxHost.InvalidActiveXStateException("MultiCard_SetAxisSpeed", System.Windows.Forms.AxHost.ActiveXInvokeKind.MethodInvoke);
            }
            int returnValue = ((int)(this.ocx.MultiCard_SetAxisSpeed(lHeadID, lAxis, dSpeed)));
            return returnValue;
        }
        
        public virtual int MultiCard_SetAxisBacklash(int lHeadID, int lAxis, double dValue) {
            if ((this.ocx == null)) {
                throw new System.Windows.Forms.AxHost.InvalidActiveXStateException("MultiCard_SetAxisBacklash", System.Windows.Forms.AxHost.ActiveXInvokeKind.MethodInvoke);
            }
            int returnValue = ((int)(this.ocx.MultiCard_SetAxisBacklash(lHeadID, lAxis, dValue)));
            return returnValue;
        }
        
        protected override void CreateSink() {
            try {
                this.eventMulticaster = new AxMMMotionEventMulticaster(this);
                this.cookie = new System.Windows.Forms.AxHost.ConnectionPointCookie(this.ocx, this.eventMulticaster, typeof(MMMOTIONLib._DMMMotionEvents));
            }
            catch (System.Exception ) {
            }
        }
        
        protected override void DetachSink() {
            try {
                this.cookie.Disconnect();
            }
            catch (System.Exception ) {
            }
        }
        
        protected override void AttachInterfaces() {
            try {
                this.ocx = ((MMMOTIONLib._DMMMotion)(this.GetOcx()));
            }
            catch (System.Exception ) {
            }
        }
        
        internal void RaiseOnMotionEnd(object sender, _DMMMotionEvents_MotionEndEvent e) {
            if ((this.MotionEnd != null)) {
                this.MotionEnd(sender, e);
            }
        }
        
        internal void RaiseOnMultiCard_MotionEnd(object sender, _DMMMotionEvents_MultiCard_MotionEndEvent e) {
            if ((this.MultiCard_MotionEnd != null)) {
                this.MultiCard_MotionEnd(sender, e);
            }
        }
    }
    
    public delegate void _DMMMotionEvents_MotionEndEventHandler(object sender, _DMMMotionEvents_MotionEndEvent e);
    
    public class _DMMMotionEvents_MotionEndEvent {
        
        public int lReason;
        
        public _DMMMotionEvents_MotionEndEvent(int lReason) {
            this.lReason = lReason;
        }
    }
    
    public delegate void _DMMMotionEvents_MultiCard_MotionEndEventHandler(object sender, _DMMMotionEvents_MultiCard_MotionEndEvent e);
    
    public class _DMMMotionEvents_MultiCard_MotionEndEvent {
        
        public int lHead;
        
        public int lReason;
        
        public _DMMMotionEvents_MultiCard_MotionEndEvent(int lHead, int lReason) {
            this.lHead = lHead;
            this.lReason = lReason;
        }
    }
    
    [System.Runtime.InteropServices.ClassInterface(System.Runtime.InteropServices.ClassInterfaceType.None)]
    public class AxMMMotionEventMulticaster : MMMOTIONLib._DMMMotionEvents {
        
        private AxMMMotion parent;
        
        public AxMMMotionEventMulticaster(AxMMMotion parent) {
            this.parent = parent;
        }
        
        public virtual void MotionEnd(int lReason) {
            _DMMMotionEvents_MotionEndEvent motionendEvent = new _DMMMotionEvents_MotionEndEvent(lReason);
            this.parent.RaiseOnMotionEnd(this.parent, motionendEvent);
        }
        
        public virtual void MultiCard_MotionEnd(int lHead, int lReason) {
            _DMMMotionEvents_MultiCard_MotionEndEvent multicard_motionendEvent = new _DMMMotionEvents_MultiCard_MotionEndEvent(lHead, lReason);
            this.parent.RaiseOnMultiCard_MotionEnd(this.parent, multicard_motionendEvent);
        }
    }
}
