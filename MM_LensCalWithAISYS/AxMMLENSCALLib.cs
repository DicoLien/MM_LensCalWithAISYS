//------------------------------------------------------------------------------
// <auto-generated>
//     這段程式碼是由工具產生的。
//     執行階段版本:4.0.30319.42000
//
//     對這個檔案所做的變更可能會造成錯誤的行為，而且如果重新產生程式碼，
//     變更將會遺失。
// </auto-generated>
//------------------------------------------------------------------------------

//[assembly: System.Reflection.AssemblyVersion("1.0.0.0")]
//[assembly: System.Windows.Forms.AxHost.TypeLibraryTimeStamp("11/09/2016 11:31:34")]

namespace AxMMLENSCALLib {
    
    
    [System.Windows.Forms.AxHost.ClsidAttribute("{67800870-f826-4c5d-8ed7-59a6913888e9}")]
    [System.ComponentModel.DesignTimeVisibleAttribute(true)]
    [System.ComponentModel.DefaultEvent("MoveTo")]
    public class AxMMLensCal : System.Windows.Forms.AxHost {
        
        private MMLENSCALLib._DMMLensCal ocx;
        
        private AxMMLensCalEventMulticaster eventMulticaster;
        
        private System.Windows.Forms.AxHost.ConnectionPointCookie cookie;
        
        public AxMMLensCal() : 
                base("67800870-f826-4c5d-8ed7-59a6913888e9") {
            this.SetAboutBoxDelegate(new AboutBoxDelegate(AboutBox));
        }
        
        [System.ComponentModel.DesignerSerializationVisibility(System.ComponentModel.DesignerSerializationVisibility.Hidden)]
        [System.Runtime.InteropServices.DispIdAttribute(26)]
        public virtual double LensCorPosOffsetX {
            get {
                if ((this.ocx == null)) {
                    throw new System.Windows.Forms.AxHost.InvalidActiveXStateException("LensCorPosOffsetX", System.Windows.Forms.AxHost.ActiveXInvokeKind.PropertyGet);
                }
                return this.ocx.LensCorPosOffsetX;
            }
            set {
                if ((this.ocx == null)) {
                    throw new System.Windows.Forms.AxHost.InvalidActiveXStateException("LensCorPosOffsetX", System.Windows.Forms.AxHost.ActiveXInvokeKind.PropertySet);
                }
                this.ocx.LensCorPosOffsetX = value;
            }
        }
        
        [System.ComponentModel.DesignerSerializationVisibility(System.ComponentModel.DesignerSerializationVisibility.Hidden)]
        [System.Runtime.InteropServices.DispIdAttribute(27)]
        public virtual double LensCorPosOffsetY {
            get {
                if ((this.ocx == null)) {
                    throw new System.Windows.Forms.AxHost.InvalidActiveXStateException("LensCorPosOffsetY", System.Windows.Forms.AxHost.ActiveXInvokeKind.PropertyGet);
                }
                return this.ocx.LensCorPosOffsetY;
            }
            set {
                if ((this.ocx == null)) {
                    throw new System.Windows.Forms.AxHost.InvalidActiveXStateException("LensCorPosOffsetY", System.Windows.Forms.AxHost.ActiveXInvokeKind.PropertySet);
                }
                this.ocx.LensCorPosOffsetY = value;
            }
        }
        
        public event _DMMLensCalEvents_MoveToEventHandler MoveTo;
        
        public event _DMMLensCalEvents_GetOffsetEventHandler GetOffset;
        
        public event System.EventHandler LensCorrectionEnd;
        
        public virtual int GetCorrectDim() {
            if ((this.ocx == null)) {
                throw new System.Windows.Forms.AxHost.InvalidActiveXStateException("GetCorrectDim", System.Windows.Forms.AxHost.ActiveXInvokeKind.MethodInvoke);
            }
            int returnValue = ((int)(this.ocx.GetCorrectDim()));
            return returnValue;
        }
        
        public virtual double GetCorrectPointX(int iIndex) {
            if ((this.ocx == null)) {
                throw new System.Windows.Forms.AxHost.InvalidActiveXStateException("GetCorrectPointX", System.Windows.Forms.AxHost.ActiveXInvokeKind.MethodInvoke);
            }
            double returnValue = ((double)(this.ocx.GetCorrectPointX(iIndex)));
            return returnValue;
        }
        
        public virtual double GetCorrectPointY(int iIndex) {
            if ((this.ocx == null)) {
                throw new System.Windows.Forms.AxHost.InvalidActiveXStateException("GetCorrectPointY", System.Windows.Forms.AxHost.ActiveXInvokeKind.MethodInvoke);
            }
            double returnValue = ((double)(this.ocx.GetCorrectPointY(iIndex)));
            return returnValue;
        }
        
        public virtual int LoadCorrectFile(string strFilename) {
            if ((this.ocx == null)) {
                throw new System.Windows.Forms.AxHost.InvalidActiveXStateException("LoadCorrectFile", System.Windows.Forms.AxHost.ActiveXInvokeKind.MethodInvoke);
            }
            int returnValue = ((int)(this.ocx.LoadCorrectFile(strFilename)));
            return returnValue;
        }
        
        public virtual int GridMarking() {
            if ((this.ocx == null)) {
                throw new System.Windows.Forms.AxHost.InvalidActiveXStateException("GridMarking", System.Windows.Forms.AxHost.ActiveXInvokeKind.MethodInvoke);
            }
            int returnValue = ((int)(this.ocx.GridMarking()));
            return returnValue;
        }
        
        public virtual int ResetCorrectTable() {
            if ((this.ocx == null)) {
                throw new System.Windows.Forms.AxHost.InvalidActiveXStateException("ResetCorrectTable", System.Windows.Forms.AxHost.ActiveXInvokeKind.MethodInvoke);
            }
            int returnValue = ((int)(this.ocx.ResetCorrectTable()));
            return returnValue;
        }
        
        public virtual int SetGridDiameter(double dDiameter) {
            if ((this.ocx == null)) {
                throw new System.Windows.Forms.AxHost.InvalidActiveXStateException("SetGridDiameter", System.Windows.Forms.AxHost.ActiveXInvokeKind.MethodInvoke);
            }
            int returnValue = ((int)(this.ocx.SetGridDiameter(dDiameter)));
            return returnValue;
        }
        
        public virtual int Initial() {
            if ((this.ocx == null)) {
                throw new System.Windows.Forms.AxHost.InvalidActiveXStateException("Initial", System.Windows.Forms.AxHost.ActiveXInvokeKind.MethodInvoke);
            }
            int returnValue = ((int)(this.ocx.Initial()));
            return returnValue;
        }
        
        public virtual int Finish() {
            if ((this.ocx == null)) {
                throw new System.Windows.Forms.AxHost.InvalidActiveXStateException("Finish", System.Windows.Forms.AxHost.ActiveXInvokeKind.MethodInvoke);
            }
            int returnValue = ((int)(this.ocx.Finish()));
            return returnValue;
        }
        
        public virtual int SetCorrectDim(int lDim) {
            if ((this.ocx == null)) {
                throw new System.Windows.Forms.AxHost.InvalidActiveXStateException("SetCorrectDim", System.Windows.Forms.AxHost.ActiveXInvokeKind.MethodInvoke);
            }
            int returnValue = ((int)(this.ocx.SetCorrectDim(lDim)));
            return returnValue;
        }
        
        public virtual void AboutBox() {
            if ((this.ocx == null)) {
                throw new System.Windows.Forms.AxHost.InvalidActiveXStateException("AboutBox", System.Windows.Forms.AxHost.ActiveXInvokeKind.MethodInvoke);
            }
            this.ocx.AboutBox();
        }
        
        public virtual int ChangeLens(string lpName) {
            if ((this.ocx == null)) {
                throw new System.Windows.Forms.AxHost.InvalidActiveXStateException("ChangeLens", System.Windows.Forms.AxHost.ActiveXInvokeKind.MethodInvoke);
            }
            int returnValue = ((int)(this.ocx.ChangeLens(lpName)));
            return returnValue;
        }
        
        public virtual int SetGridMarkType(int lType) {
            if ((this.ocx == null)) {
                throw new System.Windows.Forms.AxHost.InvalidActiveXStateException("SetGridMarkType", System.Windows.Forms.AxHost.ActiveXInvokeKind.MethodInvoke);
            }
            int returnValue = ((int)(this.ocx.SetGridMarkType(lType)));
            return returnValue;
        }
        
        public virtual int SetOutputTexts(int lOutputTexts) {
            if ((this.ocx == null)) {
                throw new System.Windows.Forms.AxHost.InvalidActiveXStateException("SetOutputTexts", System.Windows.Forms.AxHost.ActiveXInvokeKind.MethodInvoke);
            }
            int returnValue = ((int)(this.ocx.SetOutputTexts(lOutputTexts)));
            return returnValue;
        }
        
        public virtual int SetLensCorPower(double dPerc) {
            if ((this.ocx == null)) {
                throw new System.Windows.Forms.AxHost.InvalidActiveXStateException("SetLensCorPower", System.Windows.Forms.AxHost.ActiveXInvokeKind.MethodInvoke);
            }
            int returnValue = ((int)(this.ocx.SetLensCorPower(dPerc)));
            return returnValue;
        }
        
        public virtual int SetLensCorSpeed(double dSpeed) {
            if ((this.ocx == null)) {
                throw new System.Windows.Forms.AxHost.InvalidActiveXStateException("SetLensCorSpeed", System.Windows.Forms.AxHost.ActiveXInvokeKind.MethodInvoke);
            }
            int returnValue = ((int)(this.ocx.SetLensCorSpeed(dSpeed)));
            return returnValue;
        }
        
        public virtual int SetLensCorFrequency(double dKHz) {
            if ((this.ocx == null)) {
                throw new System.Windows.Forms.AxHost.InvalidActiveXStateException("SetLensCorFrequency", System.Windows.Forms.AxHost.ActiveXInvokeKind.MethodInvoke);
            }
            int returnValue = ((int)(this.ocx.SetLensCorFrequency(dKHz)));
            return returnValue;
        }
        
        public virtual int SetLensCorFillPitch(double dPitch) {
            if ((this.ocx == null)) {
                throw new System.Windows.Forms.AxHost.InvalidActiveXStateException("SetLensCorFillPitch", System.Windows.Forms.AxHost.ActiveXInvokeKind.MethodInvoke);
            }
            int returnValue = ((int)(this.ocx.SetLensCorFillPitch(dPitch)));
            return returnValue;
        }
        
        public virtual int ImportCorrectFile(string strCorrectFileName) {
            if ((this.ocx == null)) {
                throw new System.Windows.Forms.AxHost.InvalidActiveXStateException("ImportCorrectFile", System.Windows.Forms.AxHost.ActiveXInvokeKind.MethodInvoke);
            }
            int returnValue = ((int)(this.ocx.ImportCorrectFile(strCorrectFileName)));
            return returnValue;
        }
        
        public virtual int SetBasePosition(double dX, double dY) {
            if ((this.ocx == null)) {
                throw new System.Windows.Forms.AxHost.InvalidActiveXStateException("SetBasePosition", System.Windows.Forms.AxHost.ActiveXInvokeKind.MethodInvoke);
            }
            int returnValue = ((int)(this.ocx.SetBasePosition(dX, dY)));
            return returnValue;
        }
        
        public virtual int SetDirectionPosition(double dX, double dY) {
            if ((this.ocx == null)) {
                throw new System.Windows.Forms.AxHost.InvalidActiveXStateException("SetDirectionPosition", System.Windows.Forms.AxHost.ActiveXInvokeKind.MethodInvoke);
            }
            int returnValue = ((int)(this.ocx.SetDirectionPosition(dX, dY)));
            return returnValue;
        }
        
        public virtual int SetCenterPosition(double dX, double dY) {
            if ((this.ocx == null)) {
                throw new System.Windows.Forms.AxHost.InvalidActiveXStateException("SetCenterPosition", System.Windows.Forms.AxHost.ActiveXInvokeKind.MethodInvoke);
            }
            int returnValue = ((int)(this.ocx.SetCenterPosition(dX, dY)));
            return returnValue;
        }
        
        public virtual int SetTolerance(double dTolerance) {
            if ((this.ocx == null)) {
                throw new System.Windows.Forms.AxHost.InvalidActiveXStateException("SetTolerance", System.Windows.Forms.AxHost.ActiveXInvokeKind.MethodInvoke);
            }
            int returnValue = ((int)(this.ocx.SetTolerance(dTolerance)));
            return returnValue;
        }
        
        public virtual int Start(string lpName, int lMode) {
            if ((this.ocx == null)) {
                throw new System.Windows.Forms.AxHost.InvalidActiveXStateException("Start", System.Windows.Forms.AxHost.ActiveXInvokeKind.MethodInvoke);
            }
            int returnValue = ((int)(this.ocx.Start(lpName, lMode)));
            return returnValue;
        }
        
        public virtual int IsLensCorrecting() {
            if ((this.ocx == null)) {
                throw new System.Windows.Forms.AxHost.InvalidActiveXStateException("IsLensCorrecting", System.Windows.Forms.AxHost.ActiveXInvokeKind.MethodInvoke);
            }
            int returnValue = ((int)(this.ocx.IsLensCorrecting()));
            return returnValue;
        }
        
        public virtual int Stop() {
            if ((this.ocx == null)) {
                throw new System.Windows.Forms.AxHost.InvalidActiveXStateException("Stop", System.Windows.Forms.AxHost.ActiveXInvokeKind.MethodInvoke);
            }
            int returnValue = ((int)(this.ocx.Stop()));
            return returnValue;
        }
        
        public virtual int SetPosOffset(double dOffsetX, double dOffsetY) {
            if ((this.ocx == null)) {
                throw new System.Windows.Forms.AxHost.InvalidActiveXStateException("SetPosOffset", System.Windows.Forms.AxHost.ActiveXInvokeKind.MethodInvoke);
            }
            int returnValue = ((int)(this.ocx.SetPosOffset(dOffsetX, dOffsetY)));
            return returnValue;
        }
        
        public virtual int EnableMoveToEvent(int lEnable) {
            if ((this.ocx == null)) {
                throw new System.Windows.Forms.AxHost.InvalidActiveXStateException("EnableMoveToEvent", System.Windows.Forms.AxHost.ActiveXInvokeKind.MethodInvoke);
            }
            int returnValue = ((int)(this.ocx.EnableMoveToEvent(lEnable)));
            return returnValue;
        }
        
        public virtual int SetLensCorPulseWidth(double dPulseWidth) {
            if ((this.ocx == null)) {
                throw new System.Windows.Forms.AxHost.InvalidActiveXStateException("SetLensCorPulseWidth", System.Windows.Forms.AxHost.ActiveXInvokeKind.MethodInvoke);
            }
            int returnValue = ((int)(this.ocx.SetLensCorPulseWidth(dPulseWidth)));
            return returnValue;
        }
        
        public virtual int GalvoJumpTo(int lX, int lY) {
            if ((this.ocx == null)) {
                throw new System.Windows.Forms.AxHost.InvalidActiveXStateException("GalvoJumpTo", System.Windows.Forms.AxHost.ActiveXInvokeKind.MethodInvoke);
            }
            int returnValue = ((int)(this.ocx.GalvoJumpTo(lX, lY)));
            return returnValue;
        }
        
        public virtual int GetGalvoCorrectPointX(int lIndex) {
            if ((this.ocx == null)) {
                throw new System.Windows.Forms.AxHost.InvalidActiveXStateException("GetGalvoCorrectPointX", System.Windows.Forms.AxHost.ActiveXInvokeKind.MethodInvoke);
            }
            int returnValue = ((int)(this.ocx.GetGalvoCorrectPointX(lIndex)));
            return returnValue;
        }
        
        public virtual int GetGalvoCorrectPointY(int lIndex) {
            if ((this.ocx == null)) {
                throw new System.Windows.Forms.AxHost.InvalidActiveXStateException("GetGalvoCorrectPointY", System.Windows.Forms.AxHost.ActiveXInvokeKind.MethodInvoke);
            }
            int returnValue = ((int)(this.ocx.GetGalvoCorrectPointY(lIndex)));
            return returnValue;
        }
        
        public virtual int GenPixelCorrectFile(string pszTable) {
            if ((this.ocx == null)) {
                throw new System.Windows.Forms.AxHost.InvalidActiveXStateException("GenPixelCorrectFile", System.Windows.Forms.AxHost.ActiveXInvokeKind.MethodInvoke);
            }
            int returnValue = ((int)(this.ocx.GenPixelCorrectFile(pszTable)));
            return returnValue;
        }
        
        public virtual int GetGalvoPosX() {
            if ((this.ocx == null)) {
                throw new System.Windows.Forms.AxHost.InvalidActiveXStateException("GetGalvoPosX", System.Windows.Forms.AxHost.ActiveXInvokeKind.MethodInvoke);
            }
            int returnValue = ((int)(this.ocx.GetGalvoPosX()));
            return returnValue;
        }
        
        public virtual int GetGalvoPosY() {
            if ((this.ocx == null)) {
                throw new System.Windows.Forms.AxHost.InvalidActiveXStateException("GetGalvoPosY", System.Windows.Forms.AxHost.ActiveXInvokeKind.MethodInvoke);
            }
            int returnValue = ((int)(this.ocx.GetGalvoPosY()));
            return returnValue;
        }
        
        public virtual int GridTable(int lDimension, int lDot, ref int plX, ref int plY) {
            if ((this.ocx == null)) {
                throw new System.Windows.Forms.AxHost.InvalidActiveXStateException("GridTable", System.Windows.Forms.AxHost.ActiveXInvokeKind.MethodInvoke);
            }
            int returnValue = ((int)(this.ocx.GridTable(lDimension, lDot, ref plX, ref plY)));
            return returnValue;
        }
        
        public virtual int SetFillStyle(int lStyle) {
            if ((this.ocx == null)) {
                throw new System.Windows.Forms.AxHost.InvalidActiveXStateException("SetFillStyle", System.Windows.Forms.AxHost.ActiveXInvokeKind.MethodInvoke);
            }
            int returnValue = ((int)(this.ocx.SetFillStyle(lStyle)));
            return returnValue;
        }
        
        protected override void CreateSink() {
            try {
                this.eventMulticaster = new AxMMLensCalEventMulticaster(this);
                this.cookie = new System.Windows.Forms.AxHost.ConnectionPointCookie(this.ocx, this.eventMulticaster, typeof(MMLENSCALLib._DMMLensCalEvents));
            }
            catch (System.Exception ) {
            }
        }
        
        protected override void DetachSink() {
            try {
                this.cookie.Disconnect();
            }
            catch (System.Exception ) {
            }
        }
        
        protected override void AttachInterfaces() {
            try {
                this.ocx = ((MMLENSCALLib._DMMLensCal)(this.GetOcx()));
            }
            catch (System.Exception ) {
            }
        }
        
        internal void RaiseOnMoveTo(object sender, _DMMLensCalEvents_MoveToEvent e) {
            if ((this.MoveTo != null)) {
                this.MoveTo(sender, e);
            }
        }
        
        internal void RaiseOnGetOffset(object sender, _DMMLensCalEvents_GetOffsetEvent e) {
            if ((this.GetOffset != null)) {
                this.GetOffset(sender, e);
            }
        }
        
        internal void RaiseOnLensCorrectionEnd(object sender, System.EventArgs e) {
            if ((this.LensCorrectionEnd != null)) {
                this.LensCorrectionEnd(sender, e);
            }
        }
    }
    
    public delegate void _DMMLensCalEvents_MoveToEventHandler(object sender, _DMMLensCalEvents_MoveToEvent e);
    
    public class _DMMLensCalEvents_MoveToEvent {
        
        public int lIndex;
        
        public double dCorPosX;
        
        public double dCorPosY;
        
        public _DMMLensCalEvents_MoveToEvent(int lIndex, double dCorPosX, double dCorPosY) {
            this.lIndex = lIndex;
            this.dCorPosX = dCorPosX;
            this.dCorPosY = dCorPosY;
        }
    }
    
    public delegate void _DMMLensCalEvents_GetOffsetEventHandler(object sender, _DMMLensCalEvents_GetOffsetEvent e);
    
    public class _DMMLensCalEvents_GetOffsetEvent {
        
        public int lIndex;
        
        public _DMMLensCalEvents_GetOffsetEvent(int lIndex) {
            this.lIndex = lIndex;
        }
    }
    
    [System.Runtime.InteropServices.ClassInterface(System.Runtime.InteropServices.ClassInterfaceType.None)]
    public class AxMMLensCalEventMulticaster : MMLENSCALLib._DMMLensCalEvents {
        
        private AxMMLensCal parent;
        
        public AxMMLensCalEventMulticaster(AxMMLensCal parent) {
            this.parent = parent;
        }
        
        public virtual void MoveTo(int lIndex, double dCorPosX, double dCorPosY) {
            _DMMLensCalEvents_MoveToEvent movetoEvent = new _DMMLensCalEvents_MoveToEvent(lIndex, dCorPosX, dCorPosY);
            this.parent.RaiseOnMoveTo(this.parent, movetoEvent);
        }
        
        public virtual void GetOffset(int lIndex) {
            _DMMLensCalEvents_GetOffsetEvent getoffsetEvent = new _DMMLensCalEvents_GetOffsetEvent(lIndex);
            this.parent.RaiseOnGetOffset(this.parent, getoffsetEvent);
        }
        
        public virtual void LensCorrectionEnd() {
            System.EventArgs lenscorrectionendEvent = new System.EventArgs();
            this.parent.RaiseOnLensCorrectionEnd(this.parent, lenscorrectionendEvent);
        }
    }
}
