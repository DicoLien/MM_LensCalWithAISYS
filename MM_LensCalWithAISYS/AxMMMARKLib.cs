//------------------------------------------------------------------------------
// <auto-generated>
//     這段程式碼是由工具產生的。
//     執行階段版本:4.0.30319.42000
//
//     對這個檔案所做的變更可能會造成錯誤的行為，而且如果重新產生程式碼，
//     變更將會遺失。
// </auto-generated>
//------------------------------------------------------------------------------

//[assembly: System.Reflection.AssemblyVersion("1.0.0.0")]
//[assembly: System.Windows.Forms.AxHost.TypeLibraryTimeStamp("11/09/2016 11:31:38")]

namespace AxMMMARKLib {
    
    
    [System.Windows.Forms.AxHost.ClsidAttribute("{ff1cf721-ba24-405c-9e09-67139ed63ed0}")]
    [System.ComponentModel.DesignTimeVisibleAttribute(true)]
    [System.ComponentModel.DefaultEvent("IdentObject")]
    public class AxMMMark : System.Windows.Forms.AxHost {
        
        private MMMARKLib._DMMMark ocx;
        
        private AxMMMarkEventMulticaster eventMulticaster;
        
        private System.Windows.Forms.AxHost.ConnectionPointCookie cookie;
        
        public AxMMMark() : 
                base("ff1cf721-ba24-405c-9e09-67139ed63ed0") {
            this.SetAboutBoxDelegate(new AboutBoxDelegate(AboutBox));
        }
        
        public event _DMMMarkEvents_IdentObjectEventHandler IdentObject;
        
        public event _DMMMarkEvents_IdentPositionEventHandler IdentPosition;
        
        public virtual int ExportDXF(string strFile) {
            if ((this.ocx == null)) {
                throw new System.Windows.Forms.AxHost.InvalidActiveXStateException("ExportDXF", System.Windows.Forms.AxHost.ActiveXInvokeKind.MethodInvoke);
            }
            int returnValue = ((int)(this.ocx.ExportDXF(strFile)));
            return returnValue;
        }
        
        public virtual int SetWobbleSwitch(string strName, int iOn) {
            if ((this.ocx == null)) {
                throw new System.Windows.Forms.AxHost.InvalidActiveXStateException("SetWobbleSwitch", System.Windows.Forms.AxHost.ActiveXInvokeKind.MethodInvoke);
            }
            int returnValue = ((int)(this.ocx.SetWobbleSwitch(strName, iOn)));
            return returnValue;
        }
        
        public virtual int GetWobbleSwitch(string strName) {
            if ((this.ocx == null)) {
                throw new System.Windows.Forms.AxHost.InvalidActiveXStateException("GetWobbleSwitch", System.Windows.Forms.AxHost.ActiveXInvokeKind.MethodInvoke);
            }
            int returnValue = ((int)(this.ocx.GetWobbleSwitch(strName)));
            return returnValue;
        }
        
        public virtual int AutoCal(int lHead, int lCmd) {
            if ((this.ocx == null)) {
                throw new System.Windows.Forms.AxHost.InvalidActiveXStateException("AutoCal", System.Windows.Forms.AxHost.ActiveXInvokeKind.MethodInvoke);
            }
            int returnValue = ((int)(this.ocx.AutoCal(lHead, lCmd)));
            return returnValue;
        }
        
        public virtual int GetMaxMarkCounts() {
            if ((this.ocx == null)) {
                throw new System.Windows.Forms.AxHost.InvalidActiveXStateException("GetMaxMarkCounts", System.Windows.Forms.AxHost.ActiveXInvokeKind.MethodInvoke);
            }
            int returnValue = ((int)(this.ocx.GetMaxMarkCounts()));
            return returnValue;
        }
        
        public virtual int SetMaxMarkCounts(int lNew) {
            if ((this.ocx == null)) {
                throw new System.Windows.Forms.AxHost.InvalidActiveXStateException("SetMaxMarkCounts", System.Windows.Forms.AxHost.ActiveXInvokeKind.MethodInvoke);
            }
            int returnValue = ((int)(this.ocx.SetMaxMarkCounts(lNew)));
            return returnValue;
        }
        
        public virtual int ReadRS232(ref string lpBuf, int cEndChar) {
            if ((this.ocx == null)) {
                throw new System.Windows.Forms.AxHost.InvalidActiveXStateException("ReadRS232", System.Windows.Forms.AxHost.ActiveXInvokeKind.MethodInvoke);
            }
            int returnValue = ((int)(this.ocx.ReadRS232(ref lpBuf, cEndChar)));
            return returnValue;
        }
        
        public virtual int SendRS232(string lpBuf) {
            if ((this.ocx == null)) {
                throw new System.Windows.Forms.AxHost.InvalidActiveXStateException("SendRS232", System.Windows.Forms.AxHost.ActiveXInvokeKind.MethodInvoke);
            }
            int returnValue = ((int)(this.ocx.SendRS232(lpBuf)));
            return returnValue;
        }
        
        public virtual int ReadRS232Ext(int lpBuf, int lBufSize) {
            if ((this.ocx == null)) {
                throw new System.Windows.Forms.AxHost.InvalidActiveXStateException("ReadRS232Ext", System.Windows.Forms.AxHost.ActiveXInvokeKind.MethodInvoke);
            }
            int returnValue = ((int)(this.ocx.ReadRS232Ext(lpBuf, lBufSize)));
            return returnValue;
        }
        
        public virtual int SendRS232Ext(int lpBuf, int lSendSize) {
            if ((this.ocx == null)) {
                throw new System.Windows.Forms.AxHost.InvalidActiveXStateException("SendRS232Ext", System.Windows.Forms.AxHost.ActiveXInvokeKind.MethodInvoke);
            }
            int returnValue = ((int)(this.ocx.SendRS232Ext(lpBuf, lSendSize)));
            return returnValue;
        }
        
        public virtual int ZAxisConfig() {
            if ((this.ocx == null)) {
                throw new System.Windows.Forms.AxHost.InvalidActiveXStateException("ZAxisConfig", System.Windows.Forms.AxHost.ActiveXInvokeKind.MethodInvoke);
            }
            int returnValue = ((int)(this.ocx.ZAxisConfig()));
            return returnValue;
        }
        
        public virtual void AboutBox() {
            if ((this.ocx == null)) {
                throw new System.Windows.Forms.AxHost.InvalidActiveXStateException("AboutBox", System.Windows.Forms.AxHost.ActiveXInvokeKind.MethodInvoke);
            }
            this.ocx.AboutBox();
        }
        
        public virtual int EnableRedraw(int lEnable) {
            if ((this.ocx == null)) {
                throw new System.Windows.Forms.AxHost.InvalidActiveXStateException("EnableRedraw", System.Windows.Forms.AxHost.ActiveXInvokeKind.MethodInvoke);
            }
            int returnValue = ((int)(this.ocx.EnableRedraw(lEnable)));
            return returnValue;
        }
        
        public virtual int EmgStop() {
            if ((this.ocx == null)) {
                throw new System.Windows.Forms.AxHost.InvalidActiveXStateException("EmgStop", System.Windows.Forms.AxHost.ActiveXInvokeKind.MethodInvoke);
            }
            int returnValue = ((int)(this.ocx.EmgStop()));
            return returnValue;
        }
        
        public virtual int SetMarkDelay(string strName, int lDelay) {
            if ((this.ocx == null)) {
                throw new System.Windows.Forms.AxHost.InvalidActiveXStateException("SetMarkDelay", System.Windows.Forms.AxHost.ActiveXInvokeKind.MethodInvoke);
            }
            int returnValue = ((int)(this.ocx.SetMarkDelay(strName, lDelay)));
            return returnValue;
        }
        
        public virtual int GetMarkDelay(string strName) {
            if ((this.ocx == null)) {
                throw new System.Windows.Forms.AxHost.InvalidActiveXStateException("GetMarkDelay", System.Windows.Forms.AxHost.ActiveXInvokeKind.MethodInvoke);
            }
            int returnValue = ((int)(this.ocx.GetMarkDelay(strName)));
            return returnValue;
        }
        
        public virtual int SelectAddObject(string lpName) {
            if ((this.ocx == null)) {
                throw new System.Windows.Forms.AxHost.InvalidActiveXStateException("SelectAddObject", System.Windows.Forms.AxHost.ActiveXInvokeKind.MethodInvoke);
            }
            int returnValue = ((int)(this.ocx.SelectAddObject(lpName)));
            return returnValue;
        }
        
        public virtual int SelectRmoveObject(string lpName) {
            if ((this.ocx == null)) {
                throw new System.Windows.Forms.AxHost.InvalidActiveXStateException("SelectRmoveObject", System.Windows.Forms.AxHost.ActiveXInvokeKind.MethodInvoke);
            }
            int returnValue = ((int)(this.ocx.SelectRmoveObject(lpName)));
            return returnValue;
        }
        
        public virtual int SelectClearObjects() {
            if ((this.ocx == null)) {
                throw new System.Windows.Forms.AxHost.InvalidActiveXStateException("SelectClearObjects", System.Windows.Forms.AxHost.ActiveXInvokeKind.MethodInvoke);
            }
            int returnValue = ((int)(this.ocx.SelectClearObjects()));
            return returnValue;
        }
        
        public virtual int SelectAllObjects() {
            if ((this.ocx == null)) {
                throw new System.Windows.Forms.AxHost.InvalidActiveXStateException("SelectAllObjects", System.Windows.Forms.AxHost.ActiveXInvokeKind.MethodInvoke);
            }
            int returnValue = ((int)(this.ocx.SelectAllObjects()));
            return returnValue;
        }
        
        public virtual int SelectGetCount() {
            if ((this.ocx == null)) {
                throw new System.Windows.Forms.AxHost.InvalidActiveXStateException("SelectGetCount", System.Windows.Forms.AxHost.ActiveXInvokeKind.MethodInvoke);
            }
            int returnValue = ((int)(this.ocx.SelectGetCount()));
            return returnValue;
        }
        
        public virtual int SelectEnum(int lIndex, ref string pszName) {
            if ((this.ocx == null)) {
                throw new System.Windows.Forms.AxHost.InvalidActiveXStateException("SelectEnum", System.Windows.Forms.AxHost.ActiveXInvokeKind.MethodInvoke);
            }
            int returnValue = ((int)(this.ocx.SelectEnum(lIndex, ref pszName)));
            return returnValue;
        }
        
        public virtual int GetMarkSelect() {
            if ((this.ocx == null)) {
                throw new System.Windows.Forms.AxHost.InvalidActiveXStateException("GetMarkSelect", System.Windows.Forms.AxHost.ActiveXInvokeKind.MethodInvoke);
            }
            int returnValue = ((int)(this.ocx.GetMarkSelect()));
            return returnValue;
        }
        
        public virtual int SetMarkSelect(int lSelect) {
            if ((this.ocx == null)) {
                throw new System.Windows.Forms.AxHost.InvalidActiveXStateException("SetMarkSelect", System.Windows.Forms.AxHost.ActiveXInvokeKind.MethodInvoke);
            }
            int returnValue = ((int)(this.ocx.SetMarkSelect(lSelect)));
            return returnValue;
        }
        
        public virtual int SetCurEditFun(int lMode) {
            if ((this.ocx == null)) {
                throw new System.Windows.Forms.AxHost.InvalidActiveXStateException("SetCurEditFun", System.Windows.Forms.AxHost.ActiveXInvokeKind.MethodInvoke);
            }
            int returnValue = ((int)(this.ocx.SetCurEditFun(lMode)));
            return returnValue;
        }
        
        public virtual int SelectInvert(int lOption) {
            if ((this.ocx == null)) {
                throw new System.Windows.Forms.AxHost.InvalidActiveXStateException("SelectInvert", System.Windows.Forms.AxHost.ActiveXInvokeKind.MethodInvoke);
            }
            int returnValue = ((int)(this.ocx.SelectInvert(lOption)));
            return returnValue;
        }
        
        public virtual int CVPShow() {
            if ((this.ocx == null)) {
                throw new System.Windows.Forms.AxHost.InvalidActiveXStateException("CVPShow", System.Windows.Forms.AxHost.ActiveXInvokeKind.MethodInvoke);
            }
            int returnValue = ((int)(this.ocx.CVPShow()));
            return returnValue;
        }
        
        public virtual int CVPHide() {
            if ((this.ocx == null)) {
                throw new System.Windows.Forms.AxHost.InvalidActiveXStateException("CVPHide", System.Windows.Forms.AxHost.ActiveXInvokeKind.MethodInvoke);
            }
            int returnValue = ((int)(this.ocx.CVPHide()));
            return returnValue;
        }
        
        public virtual int GetVersion(ref string pszVersion) {
            if ((this.ocx == null)) {
                throw new System.Windows.Forms.AxHost.InvalidActiveXStateException("GetVersion", System.Windows.Forms.AxHost.ActiveXInvokeKind.MethodInvoke);
            }
            int returnValue = ((int)(this.ocx.GetVersion(ref pszVersion)));
            return returnValue;
        }
        
        public virtual int SetDesktopEditMode(int lEnable) {
            if ((this.ocx == null)) {
                throw new System.Windows.Forms.AxHost.InvalidActiveXStateException("SetDesktopEditMode", System.Windows.Forms.AxHost.ActiveXInvokeKind.MethodInvoke);
            }
            int returnValue = ((int)(this.ocx.SetDesktopEditMode(lEnable)));
            return returnValue;
        }
        
        public virtual int GetDesktopEditMode() {
            if ((this.ocx == null)) {
                throw new System.Windows.Forms.AxHost.InvalidActiveXStateException("GetDesktopEditMode", System.Windows.Forms.AxHost.ActiveXInvokeKind.MethodInvoke);
            }
            int returnValue = ((int)(this.ocx.GetDesktopEditMode()));
            return returnValue;
        }
        
        public virtual double GetDesktopWidth() {
            if ((this.ocx == null)) {
                throw new System.Windows.Forms.AxHost.InvalidActiveXStateException("GetDesktopWidth", System.Windows.Forms.AxHost.ActiveXInvokeKind.MethodInvoke);
            }
            double returnValue = ((double)(this.ocx.GetDesktopWidth()));
            return returnValue;
        }
        
        public virtual double GetDesktopHeight() {
            if ((this.ocx == null)) {
                throw new System.Windows.Forms.AxHost.InvalidActiveXStateException("GetDesktopHeight", System.Windows.Forms.AxHost.ActiveXInvokeKind.MethodInvoke);
            }
            double returnValue = ((double)(this.ocx.GetDesktopHeight()));
            return returnValue;
        }
        
        public virtual double GetDesktopCenterX() {
            if ((this.ocx == null)) {
                throw new System.Windows.Forms.AxHost.InvalidActiveXStateException("GetDesktopCenterX", System.Windows.Forms.AxHost.ActiveXInvokeKind.MethodInvoke);
            }
            double returnValue = ((double)(this.ocx.GetDesktopCenterX()));
            return returnValue;
        }
        
        public virtual double GetDesktopCenterY() {
            if ((this.ocx == null)) {
                throw new System.Windows.Forms.AxHost.InvalidActiveXStateException("GetDesktopCenterY", System.Windows.Forms.AxHost.ActiveXInvokeKind.MethodInvoke);
            }
            double returnValue = ((double)(this.ocx.GetDesktopCenterY()));
            return returnValue;
        }
        
        public virtual int SetDesktopSize(double dWidth, double dHeight) {
            if ((this.ocx == null)) {
                throw new System.Windows.Forms.AxHost.InvalidActiveXStateException("SetDesktopSize", System.Windows.Forms.AxHost.ActiveXInvokeKind.MethodInvoke);
            }
            int returnValue = ((int)(this.ocx.SetDesktopSize(dWidth, dHeight)));
            return returnValue;
        }
        
        public virtual int SetDesktopCenter(double dX, double dY) {
            if ((this.ocx == null)) {
                throw new System.Windows.Forms.AxHost.InvalidActiveXStateException("SetDesktopCenter", System.Windows.Forms.AxHost.ActiveXInvokeKind.MethodInvoke);
            }
            int returnValue = ((int)(this.ocx.SetDesktopCenter(dX, dY)));
            return returnValue;
        }
        
        public virtual int SetLensXReverse(int lReverse) {
            if ((this.ocx == null)) {
                throw new System.Windows.Forms.AxHost.InvalidActiveXStateException("SetLensXReverse", System.Windows.Forms.AxHost.ActiveXInvokeKind.MethodInvoke);
            }
            int returnValue = ((int)(this.ocx.SetLensXReverse(lReverse)));
            return returnValue;
        }
        
        public virtual int SetLensYReverse(int lReverse) {
            if ((this.ocx == null)) {
                throw new System.Windows.Forms.AxHost.InvalidActiveXStateException("SetLensYReverse", System.Windows.Forms.AxHost.ActiveXInvokeKind.MethodInvoke);
            }
            int returnValue = ((int)(this.ocx.SetLensYReverse(lReverse)));
            return returnValue;
        }
        
        public virtual int SetLensXYChange(int lExchange) {
            if ((this.ocx == null)) {
                throw new System.Windows.Forms.AxHost.InvalidActiveXStateException("SetLensXYChange", System.Windows.Forms.AxHost.ActiveXInvokeKind.MethodInvoke);
            }
            int returnValue = ((int)(this.ocx.SetLensXYChange(lExchange)));
            return returnValue;
        }
        
        public virtual int GetLensXReverse() {
            if ((this.ocx == null)) {
                throw new System.Windows.Forms.AxHost.InvalidActiveXStateException("GetLensXReverse", System.Windows.Forms.AxHost.ActiveXInvokeKind.MethodInvoke);
            }
            int returnValue = ((int)(this.ocx.GetLensXReverse()));
            return returnValue;
        }
        
        public virtual int GetLensYReverse() {
            if ((this.ocx == null)) {
                throw new System.Windows.Forms.AxHost.InvalidActiveXStateException("GetLensYReverse", System.Windows.Forms.AxHost.ActiveXInvokeKind.MethodInvoke);
            }
            int returnValue = ((int)(this.ocx.GetLensYReverse()));
            return returnValue;
        }
        
        public virtual int GetLensXYChange() {
            if ((this.ocx == null)) {
                throw new System.Windows.Forms.AxHost.InvalidActiveXStateException("GetLensXYChange", System.Windows.Forms.AxHost.ActiveXInvokeKind.MethodInvoke);
            }
            int returnValue = ((int)(this.ocx.GetLensXYChange()));
            return returnValue;
        }
        
        public virtual int PauseMarking() {
            if ((this.ocx == null)) {
                throw new System.Windows.Forms.AxHost.InvalidActiveXStateException("PauseMarking", System.Windows.Forms.AxHost.ActiveXInvokeKind.MethodInvoke);
            }
            int returnValue = ((int)(this.ocx.PauseMarking()));
            return returnValue;
        }
        
        public virtual int ResumeMarking() {
            if ((this.ocx == null)) {
                throw new System.Windows.Forms.AxHost.InvalidActiveXStateException("ResumeMarking", System.Windows.Forms.AxHost.ActiveXInvokeKind.MethodInvoke);
            }
            int returnValue = ((int)(this.ocx.ResumeMarking()));
            return returnValue;
        }
        
        public virtual int MarkRectExt(double dLeft, double dTop, double dRight, double dBottom, double dRoundRB, double dRoundRT, double dRoundLT, double dRoundLB) {
            if ((this.ocx == null)) {
                throw new System.Windows.Forms.AxHost.InvalidActiveXStateException("MarkRectExt", System.Windows.Forms.AxHost.ActiveXInvokeKind.MethodInvoke);
            }
            int returnValue = ((int)(this.ocx.MarkRectExt(dLeft, dTop, dRight, dBottom, dRoundRB, dRoundRT, dRoundLT, dRoundLB)));
            return returnValue;
        }
        
        public virtual int GetObjectType(string strName) {
            if ((this.ocx == null)) {
                throw new System.Windows.Forms.AxHost.InvalidActiveXStateException("GetObjectType", System.Windows.Forms.AxHost.ActiveXInvokeKind.MethodInvoke);
            }
            int returnValue = ((int)(this.ocx.GetObjectType(strName)));
            return returnValue;
        }
        
        public virtual int SetDrawMarkObj(int lOn) {
            if ((this.ocx == null)) {
                throw new System.Windows.Forms.AxHost.InvalidActiveXStateException("SetDrawMarkObj", System.Windows.Forms.AxHost.ActiveXInvokeKind.MethodInvoke);
            }
            int returnValue = ((int)(this.ocx.SetDrawMarkObj(lOn)));
            return returnValue;
        }
        
        public virtual int SetPreviewMode(int lMode) {
            if ((this.ocx == null)) {
                throw new System.Windows.Forms.AxHost.InvalidActiveXStateException("SetPreviewMode", System.Windows.Forms.AxHost.ActiveXInvokeKind.MethodInvoke);
            }
            int returnValue = ((int)(this.ocx.SetPreviewMode(lMode)));
            return returnValue;
        }
        
        public virtual int GetPreviewMode() {
            if ((this.ocx == null)) {
                throw new System.Windows.Forms.AxHost.InvalidActiveXStateException("GetPreviewMode", System.Windows.Forms.AxHost.ActiveXInvokeKind.MethodInvoke);
            }
            int returnValue = ((int)(this.ocx.GetPreviewMode()));
            return returnValue;
        }
        
        public virtual int AddLogoTxtFile_Dot(string strFilename, string strParent, string strNew) {
            if ((this.ocx == null)) {
                throw new System.Windows.Forms.AxHost.InvalidActiveXStateException("AddLogoTxtFile_Dot", System.Windows.Forms.AxHost.ActiveXInvokeKind.MethodInvoke);
            }
            int returnValue = ((int)(this.ocx.AddLogoTxtFile_Dot(strFilename, strParent, strNew)));
            return returnValue;
        }
        
        public virtual int AddLogoTxtFile_Circle(string strFilename, string strParent, string strNew, double dRadius) {
            if ((this.ocx == null)) {
                throw new System.Windows.Forms.AxHost.InvalidActiveXStateException("AddLogoTxtFile_Circle", System.Windows.Forms.AxHost.ActiveXInvokeKind.MethodInvoke);
            }
            int returnValue = ((int)(this.ocx.AddLogoTxtFile_Circle(strFilename, strParent, strNew, dRadius)));
            return returnValue;
        }
        
        public virtual int AddLogoTxtFile_Spiral(string strFilename, string strParent, string strNew, double dMaxRadius, double dMinRadius, double dPitch, int lOption) {
            if ((this.ocx == null)) {
                throw new System.Windows.Forms.AxHost.InvalidActiveXStateException("AddLogoTxtFile_Spiral", System.Windows.Forms.AxHost.ActiveXInvokeKind.MethodInvoke);
            }
            int returnValue = ((int)(this.ocx.AddLogoTxtFile_Spiral(strFilename, strParent, strNew, dMaxRadius, dMinRadius, dPitch, lOption)));
            return returnValue;
        }
        
        public virtual int SetScanHeadEnable(int lEnable) {
            if ((this.ocx == null)) {
                throw new System.Windows.Forms.AxHost.InvalidActiveXStateException("SetScanHeadEnable", System.Windows.Forms.AxHost.ActiveXInvokeKind.MethodInvoke);
            }
            int returnValue = ((int)(this.ocx.SetScanHeadEnable(lEnable)));
            return returnValue;
        }
        
        public virtual int SetMarkInfiniteMode(int lInfinite) {
            if ((this.ocx == null)) {
                throw new System.Windows.Forms.AxHost.InvalidActiveXStateException("SetMarkInfiniteMode", System.Windows.Forms.AxHost.ActiveXInvokeKind.MethodInvoke);
            }
            int returnValue = ((int)(this.ocx.SetMarkInfiniteMode(lInfinite)));
            return returnValue;
        }
        
        public virtual int GetMarkInfiniteMode() {
            if ((this.ocx == null)) {
                throw new System.Windows.Forms.AxHost.InvalidActiveXStateException("GetMarkInfiniteMode", System.Windows.Forms.AxHost.ActiveXInvokeKind.MethodInvoke);
            }
            int returnValue = ((int)(this.ocx.GetMarkInfiniteMode()));
            return returnValue;
        }
        
        public virtual int SetMatrixExt(double dXOffset, double dYOffset, double dRotateCenterX, double dRotateCenterY, double dAngle, double dScaleCenterX, double dScaleCenterY, double dScaleX, double dScaleY) {
            if ((this.ocx == null)) {
                throw new System.Windows.Forms.AxHost.InvalidActiveXStateException("SetMatrixExt", System.Windows.Forms.AxHost.ActiveXInvokeKind.MethodInvoke);
            }
            int returnValue = ((int)(this.ocx.SetMatrixExt(dXOffset, dYOffset, dRotateCenterX, dRotateCenterY, dAngle, dScaleCenterX, dScaleCenterY, dScaleX, dScaleY)));
            return returnValue;
        }
        
        public virtual int SetGlobalPassword(string strOldPassword, string strNewPassword) {
            if ((this.ocx == null)) {
                throw new System.Windows.Forms.AxHost.InvalidActiveXStateException("SetGlobalPassword", System.Windows.Forms.AxHost.ActiveXInvokeKind.MethodInvoke);
            }
            int returnValue = ((int)(this.ocx.SetGlobalPassword(strOldPassword, strNewPassword)));
            return returnValue;
        }
        
        public virtual int SetDocPassword(string strOldPassword, string strNewPassword) {
            if ((this.ocx == null)) {
                throw new System.Windows.Forms.AxHost.InvalidActiveXStateException("SetDocPassword", System.Windows.Forms.AxHost.ActiveXInvokeKind.MethodInvoke);
            }
            int returnValue = ((int)(this.ocx.SetDocPassword(strOldPassword, strNewPassword)));
            return returnValue;
        }
        
        public virtual int GetCoherentMATRIXLaserEnable() {
            if ((this.ocx == null)) {
                throw new System.Windows.Forms.AxHost.InvalidActiveXStateException("GetCoherentMATRIXLaserEnable", System.Windows.Forms.AxHost.ActiveXInvokeKind.MethodInvoke);
            }
            int returnValue = ((int)(this.ocx.GetCoherentMATRIXLaserEnable()));
            return returnValue;
        }
        
        public virtual int SetCoherentMATRIXLaserEnable(int lEnable) {
            if ((this.ocx == null)) {
                throw new System.Windows.Forms.AxHost.InvalidActiveXStateException("SetCoherentMATRIXLaserEnable", System.Windows.Forms.AxHost.ActiveXInvokeKind.MethodInvoke);
            }
            int returnValue = ((int)(this.ocx.SetCoherentMATRIXLaserEnable(lEnable)));
            return returnValue;
        }
        
        public virtual int PutLaserParameter() {
            if ((this.ocx == null)) {
                throw new System.Windows.Forms.AxHost.InvalidActiveXStateException("PutLaserParameter", System.Windows.Forms.AxHost.ActiveXInvokeKind.MethodInvoke);
            }
            int returnValue = ((int)(this.ocx.PutLaserParameter()));
            return returnValue;
        }
        
        public virtual int SetPSOParameter(int lPSOStep, int lPSOTime) {
            if ((this.ocx == null)) {
                throw new System.Windows.Forms.AxHost.InvalidActiveXStateException("SetPSOParameter", System.Windows.Forms.AxHost.ActiveXInvokeKind.MethodInvoke);
            }
            int returnValue = ((int)(this.ocx.SetPSOParameter(lPSOStep, lPSOTime)));
            return returnValue;
        }
        
        public virtual int SetAddLogoAddAllLayer(int lAddAllLayer) {
            if ((this.ocx == null)) {
                throw new System.Windows.Forms.AxHost.InvalidActiveXStateException("SetAddLogoAddAllLayer", System.Windows.Forms.AxHost.ActiveXInvokeKind.MethodInvoke);
            }
            int returnValue = ((int)(this.ocx.SetAddLogoAddAllLayer(lAddAllLayer)));
            return returnValue;
        }
        
        public virtual int GetAddLogoAddAllLayer() {
            if ((this.ocx == null)) {
                throw new System.Windows.Forms.AxHost.InvalidActiveXStateException("GetAddLogoAddAllLayer", System.Windows.Forms.AxHost.ActiveXInvokeKind.MethodInvoke);
            }
            int returnValue = ((int)(this.ocx.GetAddLogoAddAllLayer()));
            return returnValue;
        }
        
        public virtual int ReadKeyUserData(string strKey0, string strKey1, int lIndex, int lStartOffset, int lLength, ref byte pbyReadBuf) {
            if ((this.ocx == null)) {
                throw new System.Windows.Forms.AxHost.InvalidActiveXStateException("ReadKeyUserData", System.Windows.Forms.AxHost.ActiveXInvokeKind.MethodInvoke);
            }
            int returnValue = ((int)(this.ocx.ReadKeyUserData(strKey0, strKey1, lIndex, lStartOffset, lLength, ref pbyReadBuf)));
            return returnValue;
        }
        
        public virtual int WriteKeyUserData(string strKey0, string strKey1, int lIndex, int lStartOffset, int lLength, ref byte pbyWriteBuf) {
            if ((this.ocx == null)) {
                throw new System.Windows.Forms.AxHost.InvalidActiveXStateException("WriteKeyUserData", System.Windows.Forms.AxHost.ActiveXInvokeKind.MethodInvoke);
            }
            int returnValue = ((int)(this.ocx.WriteKeyUserData(strKey0, strKey1, lIndex, lStartOffset, lLength, ref pbyWriteBuf)));
            return returnValue;
        }
        
        public virtual int StartAutomation() {
            if ((this.ocx == null)) {
                throw new System.Windows.Forms.AxHost.InvalidActiveXStateException("StartAutomation", System.Windows.Forms.AxHost.ActiveXInvokeKind.MethodInvoke);
            }
            int returnValue = ((int)(this.ocx.StartAutomation()));
            return returnValue;
        }
        
        public virtual int StopAutomation() {
            if ((this.ocx == null)) {
                throw new System.Windows.Forms.AxHost.InvalidActiveXStateException("StopAutomation", System.Windows.Forms.AxHost.ActiveXInvokeKind.MethodInvoke);
            }
            int returnValue = ((int)(this.ocx.StopAutomation()));
            return returnValue;
        }
        
        public virtual int IsCardConnect() {
            if ((this.ocx == null)) {
                throw new System.Windows.Forms.AxHost.InvalidActiveXStateException("IsCardConnect", System.Windows.Forms.AxHost.ActiveXInvokeKind.MethodInvoke);
            }
            int returnValue = ((int)(this.ocx.IsCardConnect()));
            return returnValue;
        }
        
        public virtual int MarkData_Lock() {
            if ((this.ocx == null)) {
                throw new System.Windows.Forms.AxHost.InvalidActiveXStateException("MarkData_Lock", System.Windows.Forms.AxHost.ActiveXInvokeKind.MethodInvoke);
            }
            int returnValue = ((int)(this.ocx.MarkData_Lock()));
            return returnValue;
        }
        
        public virtual int MarkData_UnLock() {
            if ((this.ocx == null)) {
                throw new System.Windows.Forms.AxHost.InvalidActiveXStateException("MarkData_UnLock", System.Windows.Forms.AxHost.ActiveXInvokeKind.MethodInvoke);
            }
            int returnValue = ((int)(this.ocx.MarkData_UnLock()));
            return returnValue;
        }
        
        public virtual int StartMarkingExt(int lMode) {
            if ((this.ocx == null)) {
                throw new System.Windows.Forms.AxHost.InvalidActiveXStateException("StartMarkingExt", System.Windows.Forms.AxHost.ActiveXInvokeKind.MethodInvoke);
            }
            int returnValue = ((int)(this.ocx.StartMarkingExt(lMode)));
            return returnValue;
        }
        
        public virtual int SelectAddObjectExt(string strParent, string strObj) {
            if ((this.ocx == null)) {
                throw new System.Windows.Forms.AxHost.InvalidActiveXStateException("SelectAddObjectExt", System.Windows.Forms.AxHost.ActiveXInvokeKind.MethodInvoke);
            }
            int returnValue = ((int)(this.ocx.SelectAddObjectExt(strParent, strObj)));
            return returnValue;
        }
        
        public virtual int ExportJPG(string strFile, int lDPI) {
            if ((this.ocx == null)) {
                throw new System.Windows.Forms.AxHost.InvalidActiveXStateException("ExportJPG", System.Windows.Forms.AxHost.ActiveXInvokeKind.MethodInvoke);
            }
            int returnValue = ((int)(this.ocx.ExportJPG(strFile, lDPI)));
            return returnValue;
        }
        
        public virtual int ReadKeyUserData_2(string strKey0, string strKey1, int lIndex, int lStartOffset, int lReadSize, int lpBuf) {
            if ((this.ocx == null)) {
                throw new System.Windows.Forms.AxHost.InvalidActiveXStateException("ReadKeyUserData_2", System.Windows.Forms.AxHost.ActiveXInvokeKind.MethodInvoke);
            }
            int returnValue = ((int)(this.ocx.ReadKeyUserData_2(strKey0, strKey1, lIndex, lStartOffset, lReadSize, lpBuf)));
            return returnValue;
        }
        
        public virtual int WriteKeyUserData_2(string strKey0, string strKey1, int lIndex, int lStartOffset, int lWriteSize, int lpBuf) {
            if ((this.ocx == null)) {
                throw new System.Windows.Forms.AxHost.InvalidActiveXStateException("WriteKeyUserData_2", System.Windows.Forms.AxHost.ActiveXInvokeKind.MethodInvoke);
            }
            int returnValue = ((int)(this.ocx.WriteKeyUserData_2(strKey0, strKey1, lIndex, lStartOffset, lWriteSize, lpBuf)));
            return returnValue;
        }
        
        public virtual double GetEstimatedTotalTime() {
            if ((this.ocx == null)) {
                throw new System.Windows.Forms.AxHost.InvalidActiveXStateException("GetEstimatedTotalTime", System.Windows.Forms.AxHost.ActiveXInvokeKind.MethodInvoke);
            }
            double returnValue = ((double)(this.ocx.GetEstimatedTotalTime()));
            return returnValue;
        }
        
        public virtual double GetEstimatedTotalLength() {
            if ((this.ocx == null)) {
                throw new System.Windows.Forms.AxHost.InvalidActiveXStateException("GetEstimatedTotalLength", System.Windows.Forms.AxHost.ActiveXInvokeKind.MethodInvoke);
            }
            double returnValue = ((double)(this.ocx.GetEstimatedTotalLength()));
            return returnValue;
        }
        
        public virtual int CreateDB() {
            if ((this.ocx == null)) {
                throw new System.Windows.Forms.AxHost.InvalidActiveXStateException("CreateDB", System.Windows.Forms.AxHost.ActiveXInvokeKind.MethodInvoke);
            }
            int returnValue = ((int)(this.ocx.CreateDB()));
            return returnValue;
        }
        
        public virtual int FreeDB(int lDB) {
            if ((this.ocx == null)) {
                throw new System.Windows.Forms.AxHost.InvalidActiveXStateException("FreeDB", System.Windows.Forms.AxHost.ActiveXInvokeKind.MethodInvoke);
            }
            int returnValue = ((int)(this.ocx.FreeDB(lDB)));
            return returnValue;
        }
        
        public virtual int LaserReset() {
            if ((this.ocx == null)) {
                throw new System.Windows.Forms.AxHost.InvalidActiveXStateException("LaserReset", System.Windows.Forms.AxHost.ActiveXInvokeKind.MethodInvoke);
            }
            int returnValue = ((int)(this.ocx.LaserReset()));
            return returnValue;
        }
        
        public virtual int MarkStandBy() {
            if ((this.ocx == null)) {
                throw new System.Windows.Forms.AxHost.InvalidActiveXStateException("MarkStandBy", System.Windows.Forms.AxHost.ActiveXInvokeKind.MethodInvoke);
            }
            int returnValue = ((int)(this.ocx.MarkStandBy()));
            return returnValue;
        }
        
        public virtual int MarkShutdown() {
            if ((this.ocx == null)) {
                throw new System.Windows.Forms.AxHost.InvalidActiveXStateException("MarkShutdown", System.Windows.Forms.AxHost.ActiveXInvokeKind.MethodInvoke);
            }
            int returnValue = ((int)(this.ocx.MarkShutdown()));
            return returnValue;
        }
        
        public virtual int StartMarking(int lMode) {
            if ((this.ocx == null)) {
                throw new System.Windows.Forms.AxHost.InvalidActiveXStateException("StartMarking", System.Windows.Forms.AxHost.ActiveXInvokeKind.MethodInvoke);
            }
            int returnValue = ((int)(this.ocx.StartMarking(lMode)));
            return returnValue;
        }
        
        public virtual int StopMarking() {
            if ((this.ocx == null)) {
                throw new System.Windows.Forms.AxHost.InvalidActiveXStateException("StopMarking", System.Windows.Forms.AxHost.ActiveXInvokeKind.MethodInvoke);
            }
            int returnValue = ((int)(this.ocx.StopMarking()));
            return returnValue;
        }
        
        public virtual int IsMarking() {
            if ((this.ocx == null)) {
                throw new System.Windows.Forms.AxHost.InvalidActiveXStateException("IsMarking", System.Windows.Forms.AxHost.ActiveXInvokeKind.MethodInvoke);
            }
            int returnValue = ((int)(this.ocx.IsMarking()));
            return returnValue;
        }
        
        public virtual int GetMarkTime() {
            if ((this.ocx == null)) {
                throw new System.Windows.Forms.AxHost.InvalidActiveXStateException("GetMarkTime", System.Windows.Forms.AxHost.ActiveXInvokeKind.MethodInvoke);
            }
            int returnValue = ((int)(this.ocx.GetMarkTime()));
            return returnValue;
        }
        
        public virtual int GetMarkCounts() {
            if ((this.ocx == null)) {
                throw new System.Windows.Forms.AxHost.InvalidActiveXStateException("GetMarkCounts", System.Windows.Forms.AxHost.ActiveXInvokeKind.MethodInvoke);
            }
            int returnValue = ((int)(this.ocx.GetMarkCounts()));
            return returnValue;
        }
        
        public virtual int LoadFile(string pszPath) {
            if ((this.ocx == null)) {
                throw new System.Windows.Forms.AxHost.InvalidActiveXStateException("LoadFile", System.Windows.Forms.AxHost.ActiveXInvokeKind.MethodInvoke);
            }
            int returnValue = ((int)(this.ocx.LoadFile(pszPath)));
            return returnValue;
        }
        
        public virtual int SaveFile(string pszPath) {
            if ((this.ocx == null)) {
                throw new System.Windows.Forms.AxHost.InvalidActiveXStateException("SaveFile", System.Windows.Forms.AxHost.ActiveXInvokeKind.MethodInvoke);
            }
            int returnValue = ((int)(this.ocx.SaveFile(pszPath)));
            return returnValue;
        }
        
        public virtual int ResetFile() {
            if ((this.ocx == null)) {
                throw new System.Windows.Forms.AxHost.InvalidActiveXStateException("ResetFile", System.Windows.Forms.AxHost.ActiveXInvokeKind.MethodInvoke);
            }
            int returnValue = ((int)(this.ocx.ResetFile()));
            return returnValue;
        }
        
        public virtual int AddLogo(string strFilename, double dCX, double dCY, string strParent, string strNewName, int lMode) {
            if ((this.ocx == null)) {
                throw new System.Windows.Forms.AxHost.InvalidActiveXStateException("AddLogo", System.Windows.Forms.AxHost.ActiveXInvokeKind.MethodInvoke);
            }
            int returnValue = ((int)(this.ocx.AddLogo(strFilename, dCX, dCY, strParent, strNewName, lMode)));
            return returnValue;
        }
        
        public virtual int SetMarkRepeat(string strName, int lCount) {
            if ((this.ocx == null)) {
                throw new System.Windows.Forms.AxHost.InvalidActiveXStateException("SetMarkRepeat", System.Windows.Forms.AxHost.ActiveXInvokeKind.MethodInvoke);
            }
            int returnValue = ((int)(this.ocx.SetMarkRepeat(strName, lCount)));
            return returnValue;
        }
        
        public virtual int GetMarkRepeat(string strName) {
            if ((this.ocx == null)) {
                throw new System.Windows.Forms.AxHost.InvalidActiveXStateException("GetMarkRepeat", System.Windows.Forms.AxHost.ActiveXInvokeKind.MethodInvoke);
            }
            int returnValue = ((int)(this.ocx.GetMarkRepeat(strName)));
            return returnValue;
        }
        
        public virtual int SetMatrix(double dXOffset, double dYOffset, double dAngle) {
            if ((this.ocx == null)) {
                throw new System.Windows.Forms.AxHost.InvalidActiveXStateException("SetMatrix", System.Windows.Forms.AxHost.ActiveXInvokeKind.MethodInvoke);
            }
            int returnValue = ((int)(this.ocx.SetMatrix(dXOffset, dYOffset, dAngle)));
            return returnValue;
        }
        
        public virtual int SetPower(string strName, double dPerc) {
            if ((this.ocx == null)) {
                throw new System.Windows.Forms.AxHost.InvalidActiveXStateException("SetPower", System.Windows.Forms.AxHost.ActiveXInvokeKind.MethodInvoke);
            }
            int returnValue = ((int)(this.ocx.SetPower(strName, dPerc)));
            return returnValue;
        }
        
        public virtual double GetPower(string strName) {
            if ((this.ocx == null)) {
                throw new System.Windows.Forms.AxHost.InvalidActiveXStateException("GetPower", System.Windows.Forms.AxHost.ActiveXInvokeKind.MethodInvoke);
            }
            double returnValue = ((double)(this.ocx.GetPower(strName)));
            return returnValue;
        }
        
        public virtual int SetSpeed(string strName, double dSpeed) {
            if ((this.ocx == null)) {
                throw new System.Windows.Forms.AxHost.InvalidActiveXStateException("SetSpeed", System.Windows.Forms.AxHost.ActiveXInvokeKind.MethodInvoke);
            }
            int returnValue = ((int)(this.ocx.SetSpeed(strName, dSpeed)));
            return returnValue;
        }
        
        public virtual double GetSpeed(string strName) {
            if ((this.ocx == null)) {
                throw new System.Windows.Forms.AxHost.InvalidActiveXStateException("GetSpeed", System.Windows.Forms.AxHost.ActiveXInvokeKind.MethodInvoke);
            }
            double returnValue = ((double)(this.ocx.GetSpeed(strName)));
            return returnValue;
        }
        
        public virtual int SetFrequency(string strName, double dKHz) {
            if ((this.ocx == null)) {
                throw new System.Windows.Forms.AxHost.InvalidActiveXStateException("SetFrequency", System.Windows.Forms.AxHost.ActiveXInvokeKind.MethodInvoke);
            }
            int returnValue = ((int)(this.ocx.SetFrequency(strName, dKHz)));
            return returnValue;
        }
        
        public virtual double GetFrequency(string strName) {
            if ((this.ocx == null)) {
                throw new System.Windows.Forms.AxHost.InvalidActiveXStateException("GetFrequency", System.Windows.Forms.AxHost.ActiveXInvokeKind.MethodInvoke);
            }
            double returnValue = ((double)(this.ocx.GetFrequency(strName)));
            return returnValue;
        }
        
        public virtual int GetActiveDB() {
            if ((this.ocx == null)) {
                throw new System.Windows.Forms.AxHost.InvalidActiveXStateException("GetActiveDB", System.Windows.Forms.AxHost.ActiveXInvokeKind.MethodInvoke);
            }
            int returnValue = ((int)(this.ocx.GetActiveDB()));
            return returnValue;
        }
        
        public virtual int JumpTo(double dX, double dY) {
            if ((this.ocx == null)) {
                throw new System.Windows.Forms.AxHost.InvalidActiveXStateException("JumpTo", System.Windows.Forms.AxHost.ActiveXInvokeKind.MethodInvoke);
            }
            int returnValue = ((int)(this.ocx.JumpTo(dX, dY)));
            return returnValue;
        }
        
        public virtual double GetWorkAreaWidth() {
            if ((this.ocx == null)) {
                throw new System.Windows.Forms.AxHost.InvalidActiveXStateException("GetWorkAreaWidth", System.Windows.Forms.AxHost.ActiveXInvokeKind.MethodInvoke);
            }
            double returnValue = ((double)(this.ocx.GetWorkAreaWidth()));
            return returnValue;
        }
        
        public virtual double GetWorkAreaHeight() {
            if ((this.ocx == null)) {
                throw new System.Windows.Forms.AxHost.InvalidActiveXStateException("GetWorkAreaHeight", System.Windows.Forms.AxHost.ActiveXInvokeKind.MethodInvoke);
            }
            double returnValue = ((double)(this.ocx.GetWorkAreaHeight()));
            return returnValue;
        }
        
        public virtual int LaserOn() {
            if ((this.ocx == null)) {
                throw new System.Windows.Forms.AxHost.InvalidActiveXStateException("LaserOn", System.Windows.Forms.AxHost.ActiveXInvokeKind.MethodInvoke);
            }
            int returnValue = ((int)(this.ocx.LaserOn()));
            return returnValue;
        }
        
        public virtual int LaserOff() {
            if ((this.ocx == null)) {
                throw new System.Windows.Forms.AxHost.InvalidActiveXStateException("LaserOff", System.Windows.Forms.AxHost.ActiveXInvokeKind.MethodInvoke);
            }
            int returnValue = ((int)(this.ocx.LaserOff()));
            return returnValue;
        }
        
        public virtual int SetHomePos(double dX, double dY) {
            if ((this.ocx == null)) {
                throw new System.Windows.Forms.AxHost.InvalidActiveXStateException("SetHomePos", System.Windows.Forms.AxHost.ActiveXInvokeKind.MethodInvoke);
            }
            int returnValue = ((int)(this.ocx.SetHomePos(dX, dY)));
            return returnValue;
        }
        
        public virtual int SetLaserOnDelay(string strName, int lDelay) {
            if ((this.ocx == null)) {
                throw new System.Windows.Forms.AxHost.InvalidActiveXStateException("SetLaserOnDelay", System.Windows.Forms.AxHost.ActiveXInvokeKind.MethodInvoke);
            }
            int returnValue = ((int)(this.ocx.SetLaserOnDelay(strName, lDelay)));
            return returnValue;
        }
        
        public virtual int GetLaserOnDelay(string strName) {
            if ((this.ocx == null)) {
                throw new System.Windows.Forms.AxHost.InvalidActiveXStateException("GetLaserOnDelay", System.Windows.Forms.AxHost.ActiveXInvokeKind.MethodInvoke);
            }
            int returnValue = ((int)(this.ocx.GetLaserOnDelay(strName)));
            return returnValue;
        }
        
        public virtual int SetPolyDelay(string strName, int lDelay) {
            if ((this.ocx == null)) {
                throw new System.Windows.Forms.AxHost.InvalidActiveXStateException("SetPolyDelay", System.Windows.Forms.AxHost.ActiveXInvokeKind.MethodInvoke);
            }
            int returnValue = ((int)(this.ocx.SetPolyDelay(strName, lDelay)));
            return returnValue;
        }
        
        public virtual int GetPolyDelay(string strName) {
            if ((this.ocx == null)) {
                throw new System.Windows.Forms.AxHost.InvalidActiveXStateException("GetPolyDelay", System.Windows.Forms.AxHost.ActiveXInvokeKind.MethodInvoke);
            }
            int returnValue = ((int)(this.ocx.GetPolyDelay(strName)));
            return returnValue;
        }
        
        public virtual int SetLaserOffDelay(string strName, int lDelay) {
            if ((this.ocx == null)) {
                throw new System.Windows.Forms.AxHost.InvalidActiveXStateException("SetLaserOffDelay", System.Windows.Forms.AxHost.ActiveXInvokeKind.MethodInvoke);
            }
            int returnValue = ((int)(this.ocx.SetLaserOffDelay(strName, lDelay)));
            return returnValue;
        }
        
        public virtual int GetLaserOffDelay(string strName) {
            if ((this.ocx == null)) {
                throw new System.Windows.Forms.AxHost.InvalidActiveXStateException("GetLaserOffDelay", System.Windows.Forms.AxHost.ActiveXInvokeKind.MethodInvoke);
            }
            int returnValue = ((int)(this.ocx.GetLaserOffDelay(strName)));
            return returnValue;
        }
        
        public virtual int SetSpotDelay(string strName, int lDelay) {
            if ((this.ocx == null)) {
                throw new System.Windows.Forms.AxHost.InvalidActiveXStateException("SetSpotDelay", System.Windows.Forms.AxHost.ActiveXInvokeKind.MethodInvoke);
            }
            int returnValue = ((int)(this.ocx.SetSpotDelay(strName, lDelay)));
            return returnValue;
        }
        
        public virtual int GetSpotDelay(string strName) {
            if ((this.ocx == null)) {
                throw new System.Windows.Forms.AxHost.InvalidActiveXStateException("GetSpotDelay", System.Windows.Forms.AxHost.ActiveXInvokeKind.MethodInvoke);
            }
            int returnValue = ((int)(this.ocx.GetSpotDelay(strName)));
            return returnValue;
        }
        
        public virtual int SetJumpSpeed(string strName, double dSpeed) {
            if ((this.ocx == null)) {
                throw new System.Windows.Forms.AxHost.InvalidActiveXStateException("SetJumpSpeed", System.Windows.Forms.AxHost.ActiveXInvokeKind.MethodInvoke);
            }
            int returnValue = ((int)(this.ocx.SetJumpSpeed(strName, dSpeed)));
            return returnValue;
        }
        
        public virtual double GetJumpSpeed(string strName) {
            if ((this.ocx == null)) {
                throw new System.Windows.Forms.AxHost.InvalidActiveXStateException("GetJumpSpeed", System.Windows.Forms.AxHost.ActiveXInvokeKind.MethodInvoke);
            }
            double returnValue = ((double)(this.ocx.GetJumpSpeed(strName)));
            return returnValue;
        }
        
        public virtual int SetJumpDelay(string strName, int lDelay) {
            if ((this.ocx == null)) {
                throw new System.Windows.Forms.AxHost.InvalidActiveXStateException("SetJumpDelay", System.Windows.Forms.AxHost.ActiveXInvokeKind.MethodInvoke);
            }
            int returnValue = ((int)(this.ocx.SetJumpDelay(strName, lDelay)));
            return returnValue;
        }
        
        public virtual int GetJumpDelay(string strName) {
            if ((this.ocx == null)) {
                throw new System.Windows.Forms.AxHost.InvalidActiveXStateException("GetJumpDelay", System.Windows.Forms.AxHost.ActiveXInvokeKind.MethodInvoke);
            }
            int returnValue = ((int)(this.ocx.GetJumpDelay(strName)));
            return returnValue;
        }
        
        public virtual int AddText(string strText, double dCX, double dCY, string strParent, string strNewName) {
            if ((this.ocx == null)) {
                throw new System.Windows.Forms.AxHost.InvalidActiveXStateException("AddText", System.Windows.Forms.AxHost.ActiveXInvokeKind.MethodInvoke);
            }
            int returnValue = ((int)(this.ocx.AddText(strText, dCX, dCY, strParent, strNewName)));
            return returnValue;
        }
        
        public virtual int AddBarcode(int lType, string strBarcode, double dX, double dY, double dWidth, double dHeight, string strParent, string strNewName) {
            if ((this.ocx == null)) {
                throw new System.Windows.Forms.AxHost.InvalidActiveXStateException("AddBarcode", System.Windows.Forms.AxHost.ActiveXInvokeKind.MethodInvoke);
            }
            int returnValue = ((int)(this.ocx.AddBarcode(lType, strBarcode, dX, dY, dWidth, dHeight, strParent, strNewName)));
            return returnValue;
        }
        
        public virtual int SetTextContent(string strName, string strText) {
            if ((this.ocx == null)) {
                throw new System.Windows.Forms.AxHost.InvalidActiveXStateException("SetTextContent", System.Windows.Forms.AxHost.ActiveXInvokeKind.MethodInvoke);
            }
            int returnValue = ((int)(this.ocx.SetTextContent(strName, strText)));
            return returnValue;
        }
        
        public virtual int GetTextContent(string strName, ref string pstrText) {
            if ((this.ocx == null)) {
                throw new System.Windows.Forms.AxHost.InvalidActiveXStateException("GetTextContent", System.Windows.Forms.AxHost.ActiveXInvokeKind.MethodInvoke);
            }
            int returnValue = ((int)(this.ocx.GetTextContent(strName, ref pstrText)));
            return returnValue;
        }
        
        public virtual int SetBarcodeContent(string strName, string strBarcode) {
            if ((this.ocx == null)) {
                throw new System.Windows.Forms.AxHost.InvalidActiveXStateException("SetBarcodeContent", System.Windows.Forms.AxHost.ActiveXInvokeKind.MethodInvoke);
            }
            int returnValue = ((int)(this.ocx.SetBarcodeContent(strName, strBarcode)));
            return returnValue;
        }
        
        public virtual int GetBarcodeContent(string strName, ref string pstrBarcode) {
            if ((this.ocx == null)) {
                throw new System.Windows.Forms.AxHost.InvalidActiveXStateException("GetBarcodeContent", System.Windows.Forms.AxHost.ActiveXInvokeKind.MethodInvoke);
            }
            int returnValue = ((int)(this.ocx.GetBarcodeContent(strName, ref pstrBarcode)));
            return returnValue;
        }
        
        public virtual int MarkRect(double dLeft, double dTop, double dRight, double dBottom, double dRound) {
            if ((this.ocx == null)) {
                throw new System.Windows.Forms.AxHost.InvalidActiveXStateException("MarkRect", System.Windows.Forms.AxHost.ActiveXInvokeKind.MethodInvoke);
            }
            int returnValue = ((int)(this.ocx.MarkRect(dLeft, dTop, dRight, dBottom, dRound)));
            return returnValue;
        }
        
        public virtual int MarkArc(double dStartX, double dStartY, double dEndX, double dEndY, double dRadius, int lCCW) {
            if ((this.ocx == null)) {
                throw new System.Windows.Forms.AxHost.InvalidActiveXStateException("MarkArc", System.Windows.Forms.AxHost.ActiveXInvokeKind.MethodInvoke);
            }
            int returnValue = ((int)(this.ocx.MarkArc(dStartX, dStartY, dEndX, dEndY, dRadius, lCCW)));
            return returnValue;
        }
        
        public virtual int MarkCircle(double dCenterX, double dCenterY, double dRadius) {
            if ((this.ocx == null)) {
                throw new System.Windows.Forms.AxHost.InvalidActiveXStateException("MarkCircle", System.Windows.Forms.AxHost.ActiveXInvokeKind.MethodInvoke);
            }
            int returnValue = ((int)(this.ocx.MarkCircle(dCenterX, dCenterY, dRadius)));
            return returnValue;
        }
        
        public virtual int MarkDot(double dX, double dY) {
            if ((this.ocx == null)) {
                throw new System.Windows.Forms.AxHost.InvalidActiveXStateException("MarkDot", System.Windows.Forms.AxHost.ActiveXInvokeKind.MethodInvoke);
            }
            int returnValue = ((int)(this.ocx.MarkDot(dX, dY)));
            return returnValue;
        }
        
        public virtual int MarkLine(double dX1, double dY1, double dX2, double dY2) {
            if ((this.ocx == null)) {
                throw new System.Windows.Forms.AxHost.InvalidActiveXStateException("MarkLine", System.Windows.Forms.AxHost.ActiveXInvokeKind.MethodInvoke);
            }
            int returnValue = ((int)(this.ocx.MarkLine(dX1, dY1, dX2, dY2)));
            return returnValue;
        }
        
        public virtual int MarkText(string strText, double dCX, double dCY) {
            if ((this.ocx == null)) {
                throw new System.Windows.Forms.AxHost.InvalidActiveXStateException("MarkText", System.Windows.Forms.AxHost.ActiveXInvokeKind.MethodInvoke);
            }
            int returnValue = ((int)(this.ocx.MarkText(strText, dCX, dCY)));
            return returnValue;
        }
        
        public virtual int MoveObject(string strName, double dX, double dY, int lRelative) {
            if ((this.ocx == null)) {
                throw new System.Windows.Forms.AxHost.InvalidActiveXStateException("MoveObject", System.Windows.Forms.AxHost.ActiveXInvokeKind.MethodInvoke);
            }
            int returnValue = ((int)(this.ocx.MoveObject(strName, dX, dY, lRelative)));
            return returnValue;
        }
        
        public virtual int RotateObject(string strName, double dAngle, int lRelative) {
            if ((this.ocx == null)) {
                throw new System.Windows.Forms.AxHost.InvalidActiveXStateException("RotateObject", System.Windows.Forms.AxHost.ActiveXInvokeKind.MethodInvoke);
            }
            int returnValue = ((int)(this.ocx.RotateObject(strName, dAngle, lRelative)));
            return returnValue;
        }
        
        public virtual int SetReferencePoint(string strName, int lType, double dX, double dY) {
            if ((this.ocx == null)) {
                throw new System.Windows.Forms.AxHost.InvalidActiveXStateException("SetReferencePoint", System.Windows.Forms.AxHost.ActiveXInvokeKind.MethodInvoke);
            }
            int returnValue = ((int)(this.ocx.SetReferencePoint(strName, lType, dX, dY)));
            return returnValue;
        }
        
        public virtual double GetReferencePointX(string strName) {
            if ((this.ocx == null)) {
                throw new System.Windows.Forms.AxHost.InvalidActiveXStateException("GetReferencePointX", System.Windows.Forms.AxHost.ActiveXInvokeKind.MethodInvoke);
            }
            double returnValue = ((double)(this.ocx.GetReferencePointX(strName)));
            return returnValue;
        }
        
        public virtual double GetReferencePointY(string strName) {
            if ((this.ocx == null)) {
                throw new System.Windows.Forms.AxHost.InvalidActiveXStateException("GetReferencePointY", System.Windows.Forms.AxHost.ActiveXInvokeKind.MethodInvoke);
            }
            double returnValue = ((double)(this.ocx.GetReferencePointY(strName)));
            return returnValue;
        }
        
        public virtual int GetReferencePointType(string strName) {
            if ((this.ocx == null)) {
                throw new System.Windows.Forms.AxHost.InvalidActiveXStateException("GetReferencePointType", System.Windows.Forms.AxHost.ActiveXInvokeKind.MethodInvoke);
            }
            int returnValue = ((int)(this.ocx.GetReferencePointType(strName)));
            return returnValue;
        }
        
        public virtual int SetWobble(string strName, double dThick, int lFreq) {
            if ((this.ocx == null)) {
                throw new System.Windows.Forms.AxHost.InvalidActiveXStateException("SetWobble", System.Windows.Forms.AxHost.ActiveXInvokeKind.MethodInvoke);
            }
            int returnValue = ((int)(this.ocx.SetWobble(strName, dThick, lFreq)));
            return returnValue;
        }
        
        public virtual double GetWobbleThick(string strName) {
            if ((this.ocx == null)) {
                throw new System.Windows.Forms.AxHost.InvalidActiveXStateException("GetWobbleThick", System.Windows.Forms.AxHost.ActiveXInvokeKind.MethodInvoke);
            }
            double returnValue = ((double)(this.ocx.GetWobbleThick(strName)));
            return returnValue;
        }
        
        public virtual int GetWobbleFreq(string strName) {
            if ((this.ocx == null)) {
                throw new System.Windows.Forms.AxHost.InvalidActiveXStateException("GetWobbleFreq", System.Windows.Forms.AxHost.ActiveXInvokeKind.MethodInvoke);
            }
            int returnValue = ((int)(this.ocx.GetWobbleFreq(strName)));
            return returnValue;
        }
        
        public virtual int ScaleObject(string strName, double dSX, double dSY, int lRelative) {
            if ((this.ocx == null)) {
                throw new System.Windows.Forms.AxHost.InvalidActiveXStateException("ScaleObject", System.Windows.Forms.AxHost.ActiveXInvokeKind.MethodInvoke);
            }
            int returnValue = ((int)(this.ocx.ScaleObject(strName, dSX, dSY, lRelative)));
            return returnValue;
        }
        
        public virtual int SetMarkCounts(int lNew) {
            if ((this.ocx == null)) {
                throw new System.Windows.Forms.AxHost.InvalidActiveXStateException("SetMarkCounts", System.Windows.Forms.AxHost.ActiveXInvokeKind.MethodInvoke);
            }
            int returnValue = ((int)(this.ocx.SetMarkCounts(lNew)));
            return returnValue;
        }
        
        public virtual int SetActiveDB(int lDB) {
            if ((this.ocx == null)) {
                throw new System.Windows.Forms.AxHost.InvalidActiveXStateException("SetActiveDB", System.Windows.Forms.AxHost.ActiveXInvokeKind.MethodInvoke);
            }
            int returnValue = ((int)(this.ocx.SetActiveDB(lDB)));
            return returnValue;
        }
        
        public virtual int Redraw() {
            if ((this.ocx == null)) {
                throw new System.Windows.Forms.AxHost.InvalidActiveXStateException("Redraw", System.Windows.Forms.AxHost.ActiveXInvokeKind.MethodInvoke);
            }
            int returnValue = ((int)(this.ocx.Redraw()));
            return returnValue;
        }
        
        public virtual int Initial() {
            if ((this.ocx == null)) {
                throw new System.Windows.Forms.AxHost.InvalidActiveXStateException("Initial", System.Windows.Forms.AxHost.ActiveXInvokeKind.MethodInvoke);
            }
            int returnValue = ((int)(this.ocx.Initial()));
            return returnValue;
        }
        
        public virtual int Finish() {
            if ((this.ocx == null)) {
                throw new System.Windows.Forms.AxHost.InvalidActiveXStateException("Finish", System.Windows.Forms.AxHost.ActiveXInvokeKind.MethodInvoke);
            }
            int returnValue = ((int)(this.ocx.Finish()));
            return returnValue;
        }
        
        public virtual int SetSpotShot(string strName, int lShot) {
            if ((this.ocx == null)) {
                throw new System.Windows.Forms.AxHost.InvalidActiveXStateException("SetSpotShot", System.Windows.Forms.AxHost.ActiveXInvokeKind.MethodInvoke);
            }
            int returnValue = ((int)(this.ocx.SetSpotShot(strName, lShot)));
            return returnValue;
        }
        
        public virtual int GetSpotShot(string strName) {
            if ((this.ocx == null)) {
                throw new System.Windows.Forms.AxHost.InvalidActiveXStateException("GetSpotShot", System.Windows.Forms.AxHost.ActiveXInvokeKind.MethodInvoke);
            }
            int returnValue = ((int)(this.ocx.GetSpotShot(strName)));
            return returnValue;
        }
        
        public virtual int SetCWMode(string strName, int lOn) {
            if ((this.ocx == null)) {
                throw new System.Windows.Forms.AxHost.InvalidActiveXStateException("SetCWMode", System.Windows.Forms.AxHost.ActiveXInvokeKind.MethodInvoke);
            }
            int returnValue = ((int)(this.ocx.SetCWMode(strName, lOn)));
            return returnValue;
        }
        
        public virtual int GetCWMode(string strName) {
            if ((this.ocx == null)) {
                throw new System.Windows.Forms.AxHost.InvalidActiveXStateException("GetCWMode", System.Windows.Forms.AxHost.ActiveXInvokeKind.MethodInvoke);
            }
            int returnValue = ((int)(this.ocx.GetCWMode(strName)));
            return returnValue;
        }
        
        public virtual int SetCurrentHead(int lHeadID) {
            if ((this.ocx == null)) {
                throw new System.Windows.Forms.AxHost.InvalidActiveXStateException("SetCurrentHead", System.Windows.Forms.AxHost.ActiveXInvokeKind.MethodInvoke);
            }
            int returnValue = ((int)(this.ocx.SetCurrentHead(lHeadID)));
            return returnValue;
        }
        
        public virtual int SetMatrix2(double dXOffset, double dYOffset, double dAngle) {
            if ((this.ocx == null)) {
                throw new System.Windows.Forms.AxHost.InvalidActiveXStateException("SetMatrix2", System.Windows.Forms.AxHost.ActiveXInvokeKind.MethodInvoke);
            }
            int returnValue = ((int)(this.ocx.SetMatrix2(dXOffset, dYOffset, dAngle)));
            return returnValue;
        }
        
        public virtual int ReadKeyUID(ref string lpStr) {
            if ((this.ocx == null)) {
                throw new System.Windows.Forms.AxHost.InvalidActiveXStateException("ReadKeyUID", System.Windows.Forms.AxHost.ActiveXInvokeKind.MethodInvoke);
            }
            int returnValue = ((int)(this.ocx.ReadKeyUID(ref lpStr)));
            return returnValue;
        }
        
        public virtual int GetHeadStatus(int lHead) {
            if ((this.ocx == null)) {
                throw new System.Windows.Forms.AxHost.InvalidActiveXStateException("GetHeadStatus", System.Windows.Forms.AxHost.ActiveXInvokeKind.MethodInvoke);
            }
            int returnValue = ((int)(this.ocx.GetHeadStatus(lHead)));
            return returnValue;
        }
        
        public virtual int Zoom(double dLeft, double dTop, double dRight, double dBottom) {
            if ((this.ocx == null)) {
                throw new System.Windows.Forms.AxHost.InvalidActiveXStateException("Zoom", System.Windows.Forms.AxHost.ActiveXInvokeKind.MethodInvoke);
            }
            int returnValue = ((int)(this.ocx.Zoom(dLeft, dTop, dRight, dBottom)));
            return returnValue;
        }
        
        public virtual int Sort(string strRoot, int iLevel, double dSeedX, double dSeedY, int nOption) {
            if ((this.ocx == null)) {
                throw new System.Windows.Forms.AxHost.InvalidActiveXStateException("Sort", System.Windows.Forms.AxHost.ActiveXInvokeKind.MethodInvoke);
            }
            int returnValue = ((int)(this.ocx.Sort(strRoot, iLevel, dSeedX, dSeedY, nOption)));
            return returnValue;
        }
        
        public virtual int RunMarkingMate(string lpFile, int bEditMode) {
            if ((this.ocx == null)) {
                throw new System.Windows.Forms.AxHost.InvalidActiveXStateException("RunMarkingMate", System.Windows.Forms.AxHost.ActiveXInvokeKind.MethodInvoke);
            }
            int returnValue = ((int)(this.ocx.RunMarkingMate(lpFile, bEditMode)));
            return returnValue;
        }
        
        public virtual int GetWaveFormNumber(string strName) {
            if ((this.ocx == null)) {
                throw new System.Windows.Forms.AxHost.InvalidActiveXStateException("GetWaveFormNumber", System.Windows.Forms.AxHost.ActiveXInvokeKind.MethodInvoke);
            }
            int returnValue = ((int)(this.ocx.GetWaveFormNumber(strName)));
            return returnValue;
        }
        
        public virtual int SetWaveFormNumber(string strName, int lWaveForm) {
            if ((this.ocx == null)) {
                throw new System.Windows.Forms.AxHost.InvalidActiveXStateException("SetWaveFormNumber", System.Windows.Forms.AxHost.ActiveXInvokeKind.MethodInvoke);
            }
            int returnValue = ((int)(this.ocx.SetWaveFormNumber(strName, lWaveForm)));
            return returnValue;
        }
        
        public virtual int SetPulseWidth(string strName, double dPulseWidth) {
            if ((this.ocx == null)) {
                throw new System.Windows.Forms.AxHost.InvalidActiveXStateException("SetPulseWidth", System.Windows.Forms.AxHost.ActiveXInvokeKind.MethodInvoke);
            }
            int returnValue = ((int)(this.ocx.SetPulseWidth(strName, dPulseWidth)));
            return returnValue;
        }
        
        public virtual double GetPulseWidth(string strName) {
            if ((this.ocx == null)) {
                throw new System.Windows.Forms.AxHost.InvalidActiveXStateException("GetPulseWidth", System.Windows.Forms.AxHost.ActiveXInvokeKind.MethodInvoke);
            }
            double returnValue = ((double)(this.ocx.GetPulseWidth(strName)));
            return returnValue;
        }
        
        public virtual int XYTableConfig() {
            if ((this.ocx == null)) {
                throw new System.Windows.Forms.AxHost.InvalidActiveXStateException("XYTableConfig", System.Windows.Forms.AxHost.ActiveXInvokeKind.MethodInvoke);
            }
            int returnValue = ((int)(this.ocx.XYTableConfig()));
            return returnValue;
        }
        
        public virtual int RotaryConfig() {
            if ((this.ocx == null)) {
                throw new System.Windows.Forms.AxHost.InvalidActiveXStateException("RotaryConfig", System.Windows.Forms.AxHost.ActiveXInvokeKind.MethodInvoke);
            }
            int returnValue = ((int)(this.ocx.RotaryConfig()));
            return returnValue;
        }
        
        public virtual int EnableZoomingOnClick(int bEnable) {
            if ((this.ocx == null)) {
                throw new System.Windows.Forms.AxHost.InvalidActiveXStateException("EnableZoomingOnClick", System.Windows.Forms.AxHost.ActiveXInvokeKind.MethodInvoke);
            }
            int returnValue = ((int)(this.ocx.EnableZoomingOnClick(bEnable)));
            return returnValue;
        }
        
        public virtual int ReadKeyHardwareID(ref string lpStr) {
            if ((this.ocx == null)) {
                throw new System.Windows.Forms.AxHost.InvalidActiveXStateException("ReadKeyHardwareID", System.Windows.Forms.AxHost.ActiveXInvokeKind.MethodInvoke);
            }
            int returnValue = ((int)(this.ocx.ReadKeyHardwareID(ref lpStr)));
            return returnValue;
        }
        
        protected override void CreateSink() {
            try {
                this.eventMulticaster = new AxMMMarkEventMulticaster(this);
                this.cookie = new System.Windows.Forms.AxHost.ConnectionPointCookie(this.ocx, this.eventMulticaster, typeof(MMMARKLib._DMMMarkEvents));
            }
            catch (System.Exception ) {
            }
        }
        
        protected override void DetachSink() {
            try {
                this.cookie.Disconnect();
            }
            catch (System.Exception ) {
            }
        }
        
        protected override void AttachInterfaces() {
            try {
                this.ocx = ((MMMARKLib._DMMMark)(this.GetOcx()));
            }
            catch (System.Exception ) {
            }
        }
        
        internal void RaiseOnIdentObject(object sender, _DMMMarkEvents_IdentObjectEvent e) {
            if ((this.IdentObject != null)) {
                this.IdentObject(sender, e);
            }
        }
        
        internal void RaiseOnIdentPosition(object sender, _DMMMarkEvents_IdentPositionEvent e) {
            if ((this.IdentPosition != null)) {
                this.IdentPosition(sender, e);
            }
        }
    }
    
    public delegate void _DMMMarkEvents_IdentObjectEventHandler(object sender, _DMMMarkEvents_IdentObjectEvent e);
    
    public class _DMMMarkEvents_IdentObjectEvent {
        
        public string pstrName;
        
        public _DMMMarkEvents_IdentObjectEvent(string pstrName) {
            this.pstrName = pstrName;
        }
    }
    
    public delegate void _DMMMarkEvents_IdentPositionEventHandler(object sender, _DMMMarkEvents_IdentPositionEvent e);
    
    public class _DMMMarkEvents_IdentPositionEvent {
        
        public double dPosX;
        
        public double dPosY;
        
        public _DMMMarkEvents_IdentPositionEvent(double dPosX, double dPosY) {
            this.dPosX = dPosX;
            this.dPosY = dPosY;
        }
    }
    
    [System.Runtime.InteropServices.ClassInterface(System.Runtime.InteropServices.ClassInterfaceType.None)]
    public class AxMMMarkEventMulticaster : MMMARKLib._DMMMarkEvents {
        
        private AxMMMark parent;
        
        public AxMMMarkEventMulticaster(AxMMMark parent) {
            this.parent = parent;
        }
        
        public virtual void IdentObject(ref string pstrName) {
            _DMMMarkEvents_IdentObjectEvent identobjectEvent = new _DMMMarkEvents_IdentObjectEvent(pstrName);
            this.parent.RaiseOnIdentObject(this.parent, identobjectEvent);
            pstrName = identobjectEvent.pstrName;
        }
        
        public virtual void IdentPosition(double dPosX, double dPosY) {
            _DMMMarkEvents_IdentPositionEvent identpositionEvent = new _DMMMarkEvents_IdentPositionEvent(dPosX, dPosY);
            this.parent.RaiseOnIdentPosition(this.parent, identpositionEvent);
        }
    }
}
